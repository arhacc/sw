#!/usr/bin/env python3

import os

from datetime import date
from itertools import groupby
from string import Template

table_file_template = Template(
    """//-------------------------------------------------------------------------------------
//
//                             The XRT Project
//
// See LICENSE.TXT for details.
//
//-------------------------------------------------------------------------------------
#include <common/arch/generated/ArchConstants.hpp>

// File generated by generate-arch-header.py on $date
// DO NOT EDIT!!!!

const std::unordered_map<std::string_view, ArchConstant> archConstantLookup{
$tablevalues
};

"""
)

cpp_file_template = Template(
    """//-------------------------------------------------------------------------------------
//
//                             The XRT Project
//
// See LICENSE.TXT for details.
//
//-------------------------------------------------------------------------------------
#pragma once

#include <cstddef>
#include <string_view>
#include <unordered_map>

// File generated by generate-arch-header.py on $date
// DO NOT EDIT!!!!

enum class ArchConstant : unsigned int {
$enumcontents
};

extern const std::unordered_map<std::string_view, ArchConstant> archConstantLookup;

constexpr std::size_t cArchNumConstants = $total;
"""
)

c_file_template = Template(
    """/*-------------------------------------------------------------------------------------
 *
 *                           The XRT Project
 *
 * See LICENSE.TXT for details.
 *
 *-------------------------------------------------------------------------------------
 */
#ifndef XRT_COMMON_ARCH_GENERATED_C_ARCHCONSTANTS_H
#define XRT_COMMON_ARCH_GENERATED_C_ARCHCONSTANTS_H

// File generated by generate-arch-header.py on $date
// DO NOT EDIT!!!!

$defines

#define XPU_ARCH_NUM_CONSTANTS $total

#endif /* XRT_COMMON_ARCH_GENERATED_C_ARCHCONSTANTS_H */
"""
)


def read_file(filepath):
    with open(filepath) as file:
        lines = file.readlines()

    return [line.removesuffix("\n").split(" ", maxsplit=1)[0] for line in lines]


if os.environ["XPU_HW_PATH"] is None:
    print("XPU_HW_PATH is not set, aborting.")
    exit(1)

architecure_implementations_dir = os.path.join(
    os.environ["XPU_HW_PATH"], "architecture_implementations"
)
generated_index_filepath = os.path.join(
    os.environ["XPU_SW_PATH"],
    "tools",
    "xrt",
    "etc",
    "generated",
    "arch_constants_index.txt",
)
generated_c_filepath = os.path.join(
    os.environ["XPU_SW_PATH"],
    "tools",
    "xrt",
    "include",
    "common",
    "arch",
    "generated",
    "c",
    "ArchConstants.h",
)
generated_cpp_filepath = os.path.join(
    os.environ["XPU_SW_PATH"],
    "tools",
    "xrt",
    "include",
    "common",
    "arch",
    "generated",
    "ArchConstants.hpp",
)
generated_table_filepath = os.path.join(
    os.environ["XPU_SW_PATH"],
    "tools",
    "xrt",
    "src",
    "common",
    "arch",
    "generated",
    "ArchConstantsTable.cpp",
)

index_constants = read_file(generated_index_filepath)
hw_constants = [
    hw_file_constants
    for hw_file in os.listdir(architecure_implementations_dir)
    for hw_file_constants in read_file(
        os.path.join(architecure_implementations_dir, hw_file)
    )
    for constant in hw_file_constants
]

hw_constants.sort()

hw_constants_unique = [hw_constant for hw_constant, _ in groupby(hw_constants)]

new_constants = 0

for hw_constant in hw_constants_unique:
    if hw_constant not in index_constants:
        index_constants.append(hw_constant)
        print(f"Added new arch constant to index {hw_constant}")
        new_constants += 1

print(f"Added {new_constants} new constants to the index")

if new_constants != 0:
    with open(generated_index_filepath, "w") as generated_index_file:
        generated_index_file.writelines([line + "\n" for line in index_constants])

    print(f"Wrote updated index file to {generated_index_filepath}")

    today = date.today()

    with open(generated_cpp_filepath, "w") as generated_cpp_file:
        generated_cpp_file.write(
            cpp_file_template.substitute(
                {
                    "date": today,
                    "total": len(index_constants),
                    "enumcontents": "\n".join(
                        [
                            f"\t{constant_name} = {constant_index},"
                            for constant_index, constant_name in enumerate(
                                index_constants
                            )
                        ]
                    ),
                }
            )
        )
    with open(generated_c_filepath, "w") as generated_c_file:
        generated_c_file.write(
            c_file_template.substitute(
                {
                    "date": today,
                    "total": len(index_constants),
                    "defines": "\n".join(
                        [
                            f"#define XPU_ARCH_{constant_name} {constant_index}"
                            for constant_index, constant_name in enumerate(
                                index_constants
                            )
                        ]
                    ),
                }
            )
        )
    with open(generated_table_filepath, "w") as generated_table_file:
        generated_table_file.write(
            table_file_template.substitute(
                {
                    "date": today,
                    "defines": "\n".join(
                        [
                            f"#define XPU_ARCH_{constant_name} {constant_index}"
                            for constant_index, constant_name in enumerate(
                                index_constants
                            )
                        ]
                    ),
                    "tablevalues": "\n".join(
                        [
                            f'\t{{"{constant_name}", ArchConstant::{constant_name}}},'
                            for constant_name in index_constants
                        ]
                    ),
                }
            )
        )
