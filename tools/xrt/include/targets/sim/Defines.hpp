//
// Created by alex13dumi on 20.12.2022.
//

#ifndef XPU_SIMULATOR_DEFINES_HPP
#define XPU_SIMULATOR_DEFINES_HPP
#pragma once





#ifndef __DEFINES_VH__
#define __DEFINES_VH__ 1


#include "Parameters.hpp"
// ^ user controlled parameters
#include "Isa.hpp"
#define IO_INTF_AXILITE_WRITE_REGS_ADDR_INT_ACK 4

////////////////////////////Concatenate macros////////////////////////////
/*
 * Concatenate preprocessor tokens A and B without expanding macro definitions
 * (however, if invoked from a macro, macro arguments are expanded).
 */
#define PPCAT_NX(A, B) A ## B

/*
 * Concatenate preprocessor tokens A and B after macro-expanding them.
 */
#define PPCAT(A, B) PPCAT_NX(A, B)

/*
 * Turn A into a string literal without expanding macro definitions
 * (however, if invoked from a macro, macro arguments are expanded).
 */
#define STRINGIZE_NX(A) #A

/*
 * Turn A into a string literal after macro-expanding it.
 */
#define STRINGIZE(A) STRINGIZE_NX(A)

/*
STRINGIZE(PPCAT(T1, T2)) // produces "s1"
STRINGIZE(PPCAT_NX(T1, T2)) // produces "T1T2"
STRINGIZE_NX(PPCAT_NX(T1, T2)) // produces "PPCAT_NX(T1, T2)"

#define T1T2 visit the zoo
STRINGIZE(PPCAT_NX(T1, T2)) // produces "visit the zoo"
STRINGIZE_NX(PPCAT(T1, T2)) // produces "PPCAT(T1, T2)"
*/

// USER : do not edit below this point //

#define IO_INTF_AXILITE_READ_REGS_ADDR_STATUS_REG 0
#define IO_INTF_AXILITE_READ_REGS_ADDR_XPU_REGS (IO_INTF_AXILITE_READ_REGS_ADDR_STATUS_REG + IO_INTF_AXILITE_ADDR_STEP)


/////////////////////////////////////////////////////////////////////////////////////////////////// assembler defines
#define LABELS_NR_MAX 64000
#define $clog2(x) std::round(std::log(x)/std::log(2))
#define LABELS_NR_BITS ($clog2(LABELS_NR_MAX))


///////////////////////////////////////////////////////////////////////////////////////////////////// ISA part 1
#define INSTR_OPCODE_NR_BITS_unguarded 5
#define INSTR_OPERAND_NR_BITS_unguarded 3
#define INSTR_VALUE_NR_BITS_unguarded 24
// possible problems if instr (total) becomes more than 32b, because of "prog" io interface

#define INSTR_OPCODE_NR_BITS INSTR_OPCODE_NR_BITS_unguarded
#define INSTR_OPERAND_NR_BITS INSTR_OPERAND_NR_BITS_unguarded
#define INSTR_VALUE_NR_BITS INSTR_VALUE_NR_BITS_unguarded

#define INSTR_NR_BITS INSTR_OPCODE_NR_BITS + INSTR_OPERAND_NR_BITS + INSTR_VALUE_NR_BITS
#define DOUBLE_INSTR_NR_BITS 2*INSTR_NR_BITS

/////////////////////////////////////////////////////////////////////////////////////////////////// controller + array
#define DATA_SIZE 32
//^ for array
#define DATA_SIZE_C DATA_SIZE
//^ for controller ; do not change

#define ARRAY_INDEX_NR_BITS ($clog2(ARRAY_NR_CELLS))

#define ARRAY_CELL_MEM_NR_BITS ($clog2(ARRAY_CELL_MEM_SIZE))
// ^ + ^^ data mem

#define CONTROLLER_MEM_NR_BITS ($clog2(CONTROLLER_MEM_SIZE))
// ^ + ^^ data mem

#define CONTROLLER_INSTR_MEM_NR_BITS ($clog2(CONTROLLER_INSTR_MEM_SIZE))
// instruction memory; ^ nr locations

#define ACTIVATION_COUNTER_NR_BITS (ARRAY_INDEX_NR_BITS)
#define ACTIVATION_COUNTER_SIZE (1<<ACTIVATION_COUNTER_NR_BITS)


///////////////////////////////////////////////////////////////////////////////////////////////////// io and data propagation defines
// main io paths and sizes
// multicell and io path
#define IO_INTF_PROG_NR_BITS (INSTR_NR_BITS)
#define IO_INTERNAL_DATA_INTERFACE_NR_BITS (NR_CELLS_PER_PARTIAL_MULTICELL*DATA_SIZE)
#define IO_EXTERNAL_DATA_INTERFACE_NR_BITS (IO_INTERNAL_DATA_INTERFACE_NR_BITS)
// ^ interfata cu arm; pt fifo-uri; currently, data is combined outside the array on the proper size;
#define IO_INTERNAL_DATA_INTERFACE_NR_INTERFACES (NR_PARTIAL_MULTICELLS_PER_MULTICELL)
// ^ intre multicells

#define DISTRIBUTE_NET_OUTER_MULTICELL_DEPTH ($clog2(NR_MULTICELLS))
#define DISTRIBUTE_NET_INNER_MULTICELL_DEPTH ($clog2(NR_PARTIAL_MULTICELLS_PER_MULTICELL))
#define DISTRIBUTE_NET_INNER_PARTIAL_MULTICELL_DEPTH ($clog2(NR_CELLS_PER_PARTIAL_MULTICELL))

#define DISTRIBUTE_NET_OUTER_MULTICELL_NR_PIPELINE_REGS (DISTRIBUTE_NET_OUTER_MULTICELL_DEPTH)
#define DISTRIBUTE_NET_INNER_MULTICELL_NR_PIPELINE_REGS (DISTRIBUTE_NET_INNER_MULTICELL_DEPTH)
#define DISTRIBUTE_NET_INNER_PARTIAL_MULTICELL_NR_PIPELINE_REGS (0)
// ^^^+^^ changeable if desired; 			^ needs to be 0 for io propagation synchronization

#define DISTRIBUTE_NET_TOTAL_DEPTH (DISTRIBUTE_NET_OUTER_MULTICELL_DEPTH+DISTRIBUTE_NET_INNER_MULTICELL_DEPTH + DISTRIBUTE_NET_INNER_PARTIAL_MULTICELL_DEPTH)
#define DISTRIBUTE_NET_TOTAL_NR_PIPELINE_REGS (DISTRIBUTE_NET_OUTER_MULTICELL_NR_PIPELINE_REGS + DISTRIBUTE_NET_INNER_MULTICELL_NR_PIPELINE_REGS + DISTRIBUTE_NET_INNER_PARTIAL_MULTICELL_NR_PIPELINE_REGS)


#define IO_INTF_PROG_AXILITE_DATA_SIZE ( (IO_INTF_PROG_NR_BITS>=32) ? IO_INTF_PROG_NR_BITS:32 )
#define IO_INTF_PROG_AXILITE_ADDR_SIZE (16)
#define IO_INTF_DATA_AXISTREAM_DATA_SIZE (IO_EXTERNAL_DATA_INTERFACE_NR_BITS)

#define ENDIANNESS_LITTLE_ENDIAN 0
#define ENDIANNESS_BIG_ENDIAN 1
#define IO_INTF_AXISTREAM_DATA_IN_ENDIANNESS_EXTERNAL ENDIANNESS_LITTLE_ENDIAN
#define IO_INTF_AXISTREAM_DATA_IN_ENDIANNESS_INTERNAL ENDIANNESS_LITTLE_ENDIAN
#define IO_INTF_AXISTREAM_DATA_OUT_ENDIANNESS_INTERNAL ENDIANNESS_LITTLE_ENDIAN
#define IO_INTF_AXISTREAM_DATA_OUT_ENDIANNESS_EXTERNAL ENDIANNESS_LITTLE_ENDIAN

#define IO_INTF_AXILITE_ADDR_STEP (IO_INTF_PROG_AXILITE_DATA_SIZE/8)

// readable / writable axilite registers
#define IO_INTF_AXILITE_WRITE_REGS_PROG_FIFO_IN_ADDR (0)
#define IO_INTF_AXILITE_WRITE_REGS_INT_ACK_ADDR 4

#define IO_INTF_AXILITE_READ_REGS_STATUS_REG_ADDR 16
#define IO_INTF_AXILITE_READ_REGS_PROGRAM_COUNTER_REG_ADDR (IO_INTF_AXILITE_READ_REGS_STATUS_REG_ADDR + IO_INTF_AXILITE_ADDR_STEP)
#define IO_INTF_AXILITE_READ_REGS_CYCLE_COUNTER_REG_ADDR (IO_INTF_AXILITE_READ_REGS_PROGRAM_COUNTER_REG_ADDR + IO_INTF_AXILITE_ADDR_STEP)
#define IO_INTF_AXILITE_READ_REGS_ACCELERATOR_ID_REG_ADDR (IO_INTF_AXILITE_READ_REGS_CYCLE_COUNTER_REG_ADDR + IO_INTF_AXILITE_ADDR_STEP)
#define IO_INTF_AXILITE_READ_REGS_CONTROLLER_ACC_REG_ADDR (IO_INTF_AXILITE_READ_REGS_ACCELERATOR_ID_REG_ADDR + IO_INTF_AXILITE_ADDR_STEP)
#define IO_INTF_AXILITE_READ_REGS_FIFO_PROG_DATA_COUNT_REG_ADDR (IO_INTF_AXILITE_READ_REGS_CONTROLLER_ACC_REG_ADDR + IO_INTF_AXILITE_ADDR_STEP)
#define IO_INTF_AXILITE_READ_REGS_FIFO_DATA_IN_DATA_COUNT_REG_ADDR (IO_INTF_AXILITE_READ_REGS_FIFO_PROG_DATA_COUNT_REG_ADDR + IO_INTF_AXILITE_ADDR_STEP)
#define IO_INTF_AXILITE_READ_REGS_FIFO_DATA_OUT_DATA_COUNT_REG_ADDR (IO_INTF_AXILITE_READ_REGS_FIFO_DATA_IN_DATA_COUNT_REG_ADDR + IO_INTF_AXILITE_ADDR_STEP)

#define IO_INTF_AXILITE_NR_WRITE_REGS ( (IO_INTF_AXILITE_WRITE_REGS_INT_ACK_ADDR / IO_INTF_AXILITE_ADDR_STEP) +1)
#define IO_INTF_AXILITE_NR_READ_REGS ( (IO_INTF_AXILITE_READ_REGS_FIFO_DATA_OUT_DATA_COUNT_REG_ADDR / IO_INTF_AXILITE_ADDR_STEP) +1)

#define XPU_STATUS_REG_NR_BITS (IO_INTF_PROG_AXILITE_DATA_SIZE)

#define XPU_STATUS_REG_PROG_FIFO_EMPTY_NR_BITS 1
#define XPU_STATUS_REG_PROG_FIFO_FULL_NR_BITS 1
#define XPU_STATUS_REG_DATA_IN_FIFO_EMPTY_NR_BITS 1
#define XPU_STATUS_REG_DATA_IN_FIFO_FULL_NR_BITS 1
#define XPU_STATUS_REG_DATA_OUT_FIFO_EMPTY_NR_BITS 1
#define XPU_STATUS_REG_DATA_OUT_FIFO_FULL_NR_BITS 1
#define XPU_STATUS_REG_PROG_FIFO_PROGRAMMABLE_EMPTY_NR_BITS 1
#define XPU_STATUS_REG_PROG_FIFO_PROGRAMMABLE_FULL_NR_BITS 1
#define XPU_STATUS_REG_DATA_IN_FIFO_PROGRAMMABLE_EMPTY_NR_BITS 1
#define XPU_STATUS_REG_DATA_IN_FIFO_PROGRAMMABLE_FULL_NR_BITS 1
#define XPU_STATUS_REG_DATA_OUT_FIFO_PROGRAMMABLE_EMPTY_NR_BITS 1
#define XPU_STATUS_REG_DATA_OUT_FIFO_PROGRAMMABLE_FULL_NR_BITS 1
#define XPU_STATUS_REG_WAIT_ACK_NR_BITS 1

#define XPU_STATUS_REG_PROG_FIFO_EMPTY_LOC_LOWER 0
#define XPU_STATUS_REG_PROG_FIFO_EMPTY_LOC_UPPER XPU_STATUS_REG_PROG_FIFO_EMPTY_LOC_LOWER + XPU_STATUS_REG_PROG_FIFO_EMPTY_NR_BITS -1
#define XPU_STATUS_REG_PROG_FIFO_FULL_LOC_LOWER XPU_STATUS_REG_PROG_FIFO_EMPTY_LOC_UPPER +1
#define XPU_STATUS_REG_PROG_FIFO_FULL_LOC_UPPER XPU_STATUS_REG_PROG_FIFO_FULL_LOC_LOWER + XPU_STATUS_REG_PROG_FIFO_FULL_NR_BITS -1
#define XPU_STATUS_REG_DATA_IN_FIFO_EMPTY_LOC_LOWER XPU_STATUS_REG_PROG_FIFO_FULL_LOC_UPPER +1
#define XPU_STATUS_REG_DATA_IN_FIFO_EMPTY_LOC_UPPER XPU_STATUS_REG_DATA_IN_FIFO_EMPTY_LOC_LOWER + XPU_STATUS_REG_DATA_IN_FIFO_EMPTY_NR_BITS -1
#define XPU_STATUS_REG_DATA_IN_FIFO_FULL_LOC_LOWER XPU_STATUS_REG_DATA_IN_FIFO_EMPTY_LOC_UPPER +1
#define XPU_STATUS_REG_DATA_IN_FIFO_FULL_LOC_UPPER XPU_STATUS_REG_DATA_IN_FIFO_FULL_LOC_LOWER + XPU_STATUS_REG_DATA_IN_FIFO_FULL_NR_BITS -1
#define XPU_STATUS_REG_DATA_OUT_FIFO_EMPTY_LOC_LOWER XPU_STATUS_REG_DATA_IN_FIFO_FULL_LOC_UPPER +1
#define XPU_STATUS_REG_DATA_OUT_FIFO_EMPTY_LOC_UPPER XPU_STATUS_REG_DATA_OUT_FIFO_EMPTY_LOC_LOWER + XPU_STATUS_REG_DATA_OUT_FIFO_EMPTY_NR_BITS -1
#define XPU_STATUS_REG_DATA_OUT_FIFO_FULL_LOC_LOWER XPU_STATUS_REG_DATA_OUT_FIFO_EMPTY_LOC_UPPER +1
#define XPU_STATUS_REG_DATA_OUT_FIFO_FULL_LOC_UPPER XPU_STATUS_REG_DATA_OUT_FIFO_FULL_LOC_LOWER + XPU_STATUS_REG_DATA_OUT_FIFO_FULL_NR_BITS -1
#define XPU_STATUS_REG_PROG_FIFO_PROGRAMMABLE_EMPTY_LOC_LOWER XPU_STATUS_REG_DATA_OUT_FIFO_FULL_LOC_UPPER +1
#define XPU_STATUS_REG_PROG_FIFO_PROGRAMMABLE_EMPTY_LOC_UPPER XPU_STATUS_REG_PROG_FIFO_PROGRAMMABLE_EMPTY_LOC_LOWER + XPU_STATUS_REG_PROG_FIFO_PROGRAMMABLE_EMPTY_NR_BITS -1
#define XPU_STATUS_REG_PROG_FIFO_PROGRAMMABLE_FULL_LOC_LOWER XPU_STATUS_REG_PROG_FIFO_PROGRAMMABLE_EMPTY_LOC_UPPER +1
#define XPU_STATUS_REG_PROG_FIFO_PROGRAMMABLE_FULL_LOC_UPPER XPU_STATUS_REG_PROG_FIFO_PROGRAMMABLE_FULL_LOC_LOWER + XPU_STATUS_REG_PROG_FIFO_PROGRAMMABLE_FULL_NR_BITS -1
#define XPU_STATUS_REG_DATA_IN_FIFO_PROGRAMMABLE_EMPTY_LOC_LOWER XPU_STATUS_REG_PROG_FIFO_PROGRAMMABLE_FULL_LOC_UPPER +1
#define XPU_STATUS_REG_DATA_IN_FIFO_PROGRAMMABLE_EMPTY_LOC_UPPER XPU_STATUS_REG_DATA_IN_FIFO_PROGRAMMABLE_EMPTY_LOC_LOWER + XPU_STATUS_REG_DATA_IN_FIFO_PROGRAMMABLE_EMPTY_NR_BITS -1
#define XPU_STATUS_REG_DATA_IN_FIFO_PROGRAMMABLE_FULL_LOC_LOWER XPU_STATUS_REG_DATA_IN_FIFO_PROGRAMMABLE_EMPTY_LOC_UPPER +1
#define XPU_STATUS_REG_DATA_IN_FIFO_PROGRAMMABLE_FULL_LOC_UPPER XPU_STATUS_REG_DATA_IN_FIFO_PROGRAMMABLE_FULL_LOC_LOWER + XPU_STATUS_REG_DATA_IN_FIFO_PROGRAMMABLE_FULL_NR_BITS -1
#define XPU_STATUS_REG_DATA_OUT_FIFO_PROGRAMMABLE_EMPTY_LOC_LOWER XPU_STATUS_REG_DATA_IN_FIFO_PROGRAMMABLE_FULL_LOC_UPPER +1
#define XPU_STATUS_REG_DATA_OUT_FIFO_PROGRAMMABLE_EMPTY_LOC_UPPER XPU_STATUS_REG_DATA_OUT_FIFO_PROGRAMMABLE_EMPTY_LOC_LOWER + XPU_STATUS_REG_DATA_OUT_FIFO_PROGRAMMABLE_EMPTY_NR_BITS -1
#define XPU_STATUS_REG_DATA_OUT_FIFO_PROGRAMMABLE_FULL_LOC_LOWER XPU_STATUS_REG_DATA_OUT_FIFO_PROGRAMMABLE_EMPTY_LOC_UPPER +1
#define XPU_STATUS_REG_DATA_OUT_FIFO_PROGRAMMABLE_FULL_LOC_UPPER XPU_STATUS_REG_DATA_OUT_FIFO_PROGRAMMABLE_FULL_LOC_LOWER + XPU_STATUS_REG_DATA_OUT_FIFO_PROGRAMMABLE_FULL_NR_BITS -1
//#define XPU_STATUS_REG_WAIT_ACK_LOC_LOWER XPU_STATUS_REG_DATA_OUT_FIFO_PROGRAMMABLE_FULL_LOC_UPPER +1
//#define XPU_STATUS_REG_WAIT_ACK_LOC_UPPER XPU_STATUS_REG_WAIT_ACK_LOC_LOWER + XPU_STATUS_REG_WAIT_ACK_NR_BITS -1
#define XPU_STATUS_REG_WAIT_ACK_LOC_UPPER 12
#define XPU_STATUS_REG_WAIT_ACK_LOC_LOWER 12
#define XPU_STATUS_REG_OCCUPIED_NR_BITS (XPU_STATUS_REG_WAIT_ACK_LOC_UPPER+1)

#define XPU_STATUS_REG_PROG_FIFO_EMPTY_LOC CONCAT_VALUES(XPU_STATUS_REG_PROG_FIFO_EMPTY_LOC_UPPER,XPU_STATUS_REG_PROG_FIFO_EMPTY_LOC_LOWER)
#define XPU_STATUS_REG_PROG_FIFO_FULL_LOC CONCAT_VALUES(XPU_STATUS_REG_PROG_FIFO_FULL_LOC_UPPER,XPU_STATUS_REG_PROG_FIFO_FULL_LOC_LOWER)
#define XPU_STATUS_REG_DATA_IN_FIFO_EMPTY_LOC CONCAT_VALUES(XPU_STATUS_REG_DATA_IN_FIFO_EMPTY_LOC_UPPER,XPU_STATUS_REG_DATA_IN_FIFO_EMPTY_LOC_LOWER)
#define XPU_STATUS_REG_DATA_IN_FIFO_FULL_LOC CONCAT_VALUES(XPU_STATUS_REG_DATA_IN_FIFO_FULL_LOC_UPPER,XPU_STATUS_REG_DATA_IN_FIFO_FULL_LOC_LOWER)
#define XPU_STATUS_REG_DATA_OUT_FIFO_EMPTY_LOC CONCAT_VALUES(XPU_STATUS_REG_DATA_OUT_FIFO_EMPTY_LOC_UPPER,XPU_STATUS_REG_DATA_OUT_FIFO_EMPTY_LOC_LOWER)
#define XPU_STATUS_REG_DATA_OUT_FIFO_FULL_LOC CONCAT_VALUES(XPU_STATUS_REG_DATA_OUT_FIFO_FULL_LOC_UPPER,XPU_STATUS_REG_DATA_OUT_FIFO_FULL_LOC_LOWER)
#define XPU_STATUS_REG_PROG_FIFO_PROGRAMMABLE_EMPTY_LOC CONCAT_VALUES(XPU_STATUS_REG_PROG_FIFO_PROGRAMMABLE_EMPTY_LOC_UPPER,XPU_STATUS_REG_PROG_FIFO_PROGRAMMABLE_EMPTY_LOC_LOWER)
#define XPU_STATUS_REG_PROG_FIFO_PROGRAMMABLE_FULL_LOC CONCAT_VALUES(XPU_STATUS_REG_PROG_FIFO_PROGRAMMABLE_FULL_LOC_UPPER,XPU_STATUS_REG_PROG_FIFO_PROGRAMMABLE_FULL_LOC_LOWER)
#define XPU_STATUS_REG_DATA_IN_FIFO_PROGRAMMABLE_EMPTY_LOC CONCAT_VALUES(XPU_STATUS_REG_DATA_IN_FIFO_PROGRAMMABLE_EMPTY_LOC_UPPER,XPU_STATUS_REG_DATA_IN_FIFO_PROGRAMMABLE_EMPTY_LOC_LOWER)
#define XPU_STATUS_REG_DATA_IN_FIFO_PROGRAMMABLE_FULL_LOC CONCAT_VALUES(XPU_STATUS_REG_DATA_IN_FIFO_PROGRAMMABLE_FULL_LOC_UPPER,XPU_STATUS_REG_DATA_IN_FIFO_PROGRAMMABLE_FULL_LOC_LOWER)
#define XPU_STATUS_REG_DATA_OUT_FIFO_PROGRAMMABLE_EMPTY_LOC CONCAT_VALUES(XPU_STATUS_REG_DATA_OUT_FIFO_PROGRAMMABLE_EMPTY_LOC_UPPER,XPU_STATUS_REG_DATA_OUT_FIFO_PROGRAMMABLE_EMPTY_LOC_LOWER)
#define XPU_STATUS_REG_DATA_OUT_FIFO_PROGRAMMABLE_FULL_LOC CONCAT_VALUES(XPU_STATUS_REG_DATA_OUT_FIFO_PROGRAMMABLE_FULL_LOC_UPPER,XPU_STATUS_REG_DATA_OUT_FIFO_PROGRAMMABLE_FULL_LOC_LOWER)
#define XPU_STATUS_REG_WAIT_ACK_LOC 12



// FIFO : program + data in + data out;
//The maximum FIFO size (width x depth) is limited to 150-Megabits for xilinx primitive
// data fifo
#define IO_DATA_FIFO_DATA_OUT_TLAST_NR_BITS 1
#define IO_DATA_FIFO_DATA_OUT_DATA_BITS_NR_BITS IO_INTF_DATA_AXISTREAM_DATA_SIZE
#define IO_DATA_FIFO_DATA_OUT_TLAST_BITS_LOC_LOWER 0
#define IO_DATA_FIFO_DATA_OUT_TLAST_BITS_LOC_UPPER IO_DATA_FIFO_DATA_OUT_TLAST_BITS_LOC_LOWER + IO_DATA_FIFO_DATA_OUT_TLAST_NR_BITS-1
#define IO_DATA_FIFO_DATA_OUT_DATA_BITS_LOC_LOWER IO_DATA_FIFO_DATA_OUT_TLAST_BITS_LOC_UPPER+1
#define IO_DATA_FIFO_DATA_OUT_DATA_BITS_LOC_UPPER IO_DATA_FIFO_DATA_OUT_DATA_BITS_LOC_LOWER+IO_DATA_FIFO_DATA_OUT_DATA_BITS_NR_BITS-1

#define IO_DATA_FIFO_DATA_OUT_DATA_BITS_LOC IO_DATA_FIFO_DATA_OUT_DATA_BITS_LOC_UPPER:IO_DATA_FIFO_DATA_OUT_DATA_BITS_LOC_LOWER
#define IO_DATA_FIFO_DATA_OUT_TLAST_BITS_LOC IO_DATA_FIFO_DATA_OUT_TLAST_BITS_LOC_UPPER:IO_DATA_FIFO_DATA_OUT_TLAST_BITS_LOC_LOWER

#define IO_DATA_IN_FIFO_DATA_SIZE (IO_INTF_DATA_AXISTREAM_DATA_SIZE)
#define IO_DATA_OUT_FIFO_DATA_SIZE (IO_DATA_FIFO_DATA_OUT_TLAST_NR_BITS + IO_DATA_FIFO_DATA_OUT_DATA_BITS_NR_BITS)
#define IO_DATA_FIFO_SIZE (1<<IO_DATA_FIFO_POINTER_NR_BITS)
#define IO_DATA_FIFO_programable_EMPTY_THRESHOLD_PERCENTAGE (10)
#define IO_DATA_FIFO_programable_FULL_THRESHOLD_PERCENTAGE (90)
// percentage works while within min/max limits for threshold as defined in ug953 / XPM_FIFO_SYNC
// https##//docs.xilinx.com/r/en-US/ug953-vivado-7series-libraries/XPM_FIFO_SYNC
#define IO_DATA_FIFO_programable_EMPTY_THRESHOLD_DESIRED_VALUE (IO_DATA_FIFO_SIZE*IO_DATA_FIFO_programable_EMPTY_THRESHOLD_PERCENTAGE/100)
#define IO_DATA_FIFO_programable_FULL_THRESHOLD_DESIRED_VALUE (IO_DATA_FIFO_SIZE*IO_DATA_FIFO_programable_FULL_THRESHOLD_PERCENTAGE/100)

#define IO_DATA_FIFO_programable_EMPTY_THRESHOLD ( IO_DATA_FIFO_programable_EMPTY_THRESHOLD_DESIRED_VALUE < (3+1*2) ? \
	(3+1*2) : \
	IO_DATA_FIFO_programable_EMPTY_THRESHOLD_DESIRED_VALUE > (IO_DATA_FIFO_SIZE-3)-(1*2) ? \
		(IO_DATA_FIFO_SIZE-3)-(1*2) : \
		IO_DATA_FIFO_programable_EMPTY_THRESHOLD_DESIRED_VALUE )
#define IO_DATA_FIFO_programable_FULL_THRESHOLD ( IO_DATA_FIFO_programable_FULL_THRESHOLD_DESIRED_VALUE < 3 + (1*2*(IO_DATA_FIFO_SIZE/IO_DATA_FIFO_SIZE)) ? \
	3 + (1*2*(IO_DATA_FIFO_SIZE/IO_DATA_FIFO_SIZE)) : \
	IO_DATA_FIFO_programable_FULL_THRESHOLD_DESIRED_VALUE > (IO_DATA_FIFO_SIZE-3) - (1*2*(IO_DATA_FIFO_SIZE/IO_DATA_FIFO_SIZE)) ? \
		(IO_DATA_FIFO_SIZE-3) - (1*2*(IO_DATA_FIFO_SIZE/IO_DATA_FIFO_SIZE)) :\
		IO_DATA_FIFO_programable_FULL_THRESHOLD_DESIRED_VALUE )

// prog fifo
#define IO_PROG_FIFO_DATA_SIZE (DOUBLE_INSTR_NR_BITS)
#define IO_PROG_FIFO_SIZE (1<<IO_PROG_FIFO_POINTER_NR_BITS)
#define IO_PROG_FIFO_programable_EMPTY_THRESHOLD_PERCENTAGE (10)
#define IO_PROG_FIFO_programable_FULL_THRESHOLD_PERCENTAGE (90)
// percentage works while within min/max limits for threshold as defined in ug953 / XPM_FIFO_SYNC
// https://docs.xilinx.com/r/en-US/ug953-vivado-7series-libraries/XPM_FIFO_SYNC
#define IO_PROG_FIFO_programable_EMPTY_THRESHOLD_DESIRED_VALUE (IO_PROG_FIFO_SIZE*IO_PROG_FIFO_programable_EMPTY_THRESHOLD_PERCENTAGE/100)
#define IO_PROG_FIFO_programable_FULL_THRESHOLD_DESIRED_VALUE (IO_PROG_FIFO_SIZE*IO_PROG_FIFO_programable_FULL_THRESHOLD_PERCENTAGE/100)

#define IO_PROG_FIFO_programable_EMPTY_THRESHOLD ( IO_PROG_FIFO_programable_EMPTY_THRESHOLD_DESIRED_VALUE < (3+1*2) ? \
	(3+1*2) : \
	IO_PROG_FIFO_programable_EMPTY_THRESHOLD_DESIRED_VALUE > (IO_PROG_FIFO_SIZE-3)-(1*2) ? \
		(IO_PROG_FIFO_SIZE-3)-(1*2) : \
		IO_PROG_FIFO_programable_EMPTY_THRESHOLD_DESIRED_VALUE )
#define IO_PROG_FIFO_programable_FULL_THRESHOLD ( IO_PROG_FIFO_programable_FULL_THRESHOLD_DESIRED_VALUE < 3 + (1*2*(IO_PROG_FIFO_SIZE/IO_PROG_FIFO_SIZE)) ? \
	3 + (1*2*(IO_PROG_FIFO_SIZE/IO_PROG_FIFO_SIZE)) : \
	IO_PROG_FIFO_programable_FULL_THRESHOLD_DESIRED_VALUE > (IO_PROG_FIFO_SIZE-3) - (1*2*(IO_PROG_FIFO_SIZE/IO_PROG_FIFO_SIZE)) ? \
		(IO_PROG_FIFO_SIZE-3) - (1*2*(IO_PROG_FIFO_SIZE/IO_PROG_FIFO_SIZE)) :\
		IO_PROG_FIFO_programable_FULL_THRESHOLD_DESIRED_VALUE )



/////////////////////////////////////////////////////////////////////////////////////////////////////////// memory control defines
#define CTRL_MEM_MEMCOM_CMD_SIZE_unguarded 3
#define CTRL_MEM_MEMCOM_OP_SIZE_unguarded 3
#define CTRL_MEM_MEMCOM_SIZE (6)
#define CTRL_MEM_MEMCOM_CMD_LOC_UPPER CTRL_MEM_MEMCOM_CMD_SIZE_unguarded+CTRL_MEM_MEMCOM_OP_SIZE_unguarded-1
#define CTRL_MEM_MEMCOM_CMD_LOC_LOWER CTRL_MEM_MEMCOM_OP_SIZE_unguarded
#define CTRL_MEM_MEMCOM_OP_LOC_UPPER CTRL_MEM_MEMCOM_OP_SIZE_unguarded-1
#define CTRL_MEM_MEMCOM_OP_LOC_LOWER 0
#define CTRL_MEM_MEMCOM_CMD_LOC CONCAT_VALUES(CTRL_MEM_MEMCOM_CMD_LOC_UPPER,CTRL_MEM_MEMCOM_CMD_LOC_LOWER)
#define CTRL_MEM_MEMCOM_OP_LOC CONCAT_VALUES(CTRL_MEM_MEMCOM_OP_LOC_UPPER,CTRL_MEM_MEMCOM_OP_LOC_LOWER)
#define CTRL_MEM_MEMCOM_CMD_MEM_NONE(x, delimiter) (x##delimiter##d0) // delimiter is ' and x = CTRL_MEM_MEMCOM_CMD_SIZE_unguarded
#define CTRL_MEM_MEMCOM_CMD_MEM_LOAD (CTRL_MEM_MEMCOM_CMD_MEM_NONE+1)
#define CTRL_MEM_MEMCOM_CMD_MEM_STORE (CTRL_MEM_MEMCOM_CMD_MEM_LOAD+1)
#define CTRL_MEM_MEMCOM_CMD_ADDR_REG_LOAD (CTRL_MEM_MEMCOM_CMD_MEM_STORE+1)
#define CTRL_MEM_MEMCOM_CMD_MEM_LOAD_STORE (CTRL_MEM_MEMCOM_CMD_ADDR_REG_LOAD+1)
#define CTRL_MEM_MEMCOM_CMD_MEM_LOAD_STORE_REG_ADD (CTRL_MEM_MEMCOM_CMD_MEM_LOAD_STORE+1)
#define CTRL_MEM_MEMCOM_CMD_MEM_LOAD_ADDR_REG_ADD (CTRL_MEM_MEMCOM_CMD_MEM_LOAD_STORE_REG_ADD+1)
#define CTRL_MEM_MEMCOM_CMD_MEM_STORE_ADDR_REG_ADD (CTRL_MEM_MEMCOM_CMD_MEM_LOAD_ADDR_REG_ADD+1)

#define ARRAY_MEM_MEMCOM_SIZE_unguarded 2
#define ARRAY_MEM_MEMCOM_SIZE (ARRAY_MEM_MEMCOM_SIZE_unguarded)
#define ARRAY_MEM_MEMCOM_CMD_NONE(x, delimiter) "x##delimiter##d0" // x = ARRAY_MEM_MEMCOM_SIZE_unguarded
#define ARRAY_MEM_MEMCOM_CMD_ABS_ADDR (ARRAY_MEM_MEMCOM_CMD_NONE+1)
#define ARRAY_MEM_MEMCOM_CMD_REL_ADDR (ARRAY_MEM_MEMCOM_CMD_ABS_ADDR+1)
#define ARRAY_MEM_MEMCOM_CMD_REL_ADDR_and_INCREMENT (ARRAY_MEM_MEMCOM_CMD_REL_ADDR+1)

#define ARRAY_MEM_ADDR_REG_CMD_NONE (0)
#define ARRAY_MEM_ADDR_REG_CMD_WRITE (ARRAY_MEM_ADDR_REG_CMD_NONE +1)
#define ARRAY_MEM_ADDR_REG_CMD_DUPLICATE (ARRAY_MEM_ADDR_REG_CMD_WRITE +1)
#define ARRAY_MEM_ADDR_REG_CMD_POP (ARRAY_MEM_ADDR_REG_CMD_DUPLICATE +1)

#define ARRAY_MEM_ADDR_REG_NR_BITS ($clog2(ARRAY_MEM_ADDR_REG_CMD_POP +1) +1)


////////////////////////////////////////////////////////////////////////////////////////////////////// stack defines
#define ARRAY_CELL_STACK_BIDIRECTIONAL_SR_SIZE (RESOURCE_ARRAY_CELL_STACK_SIZE-2)

#define ARRAY_STACK_CMD_POP0_PUSH0 (0)
#define ARRAY_STACK_CMD_POP1_PUSH0 (ARRAY_STACK_CMD_POP0_PUSH0+1)
#define ARRAY_STACK_CMD_POP0_PUSH1 (ARRAY_STACK_CMD_POP1_PUSH0+1)
#define ARRAY_STACK_CMD_POP1_PUSH1 (ARRAY_STACK_CMD_POP0_PUSH1+1)
#define ARRAY_STACK_CMD_POP2_PUSH1 (ARRAY_STACK_CMD_POP1_PUSH1+1)
#define ARRAY_STACK_CMD_POP2_PUSH2 (ARRAY_STACK_CMD_POP2_PUSH1+1)
// ^ 2_2 for swap
// pop is done 'first'

#define ARRAY_STACK_NR_CMD (ARRAY_STACK_CMD_POP2_PUSH2+1)
#define ARRAY_STACK_CMD_SIZE ($clog2(ARRAY_STACK_NR_CMD) +1)

#define CTRL_CELL_STACK_BIDIRECTIONAL_SR_SIZE (RESOURCE_CTRL_CELL_STACK_SIZE-2)

#define CTRL_STACK_CMD_POP0_PUSH0 (0)
#define CTRL_STACK_CMD_POP1_PUSH0 (CTRL_STACK_CMD_POP0_PUSH0+1)
#define CTRL_STACK_CMD_POP0_PUSH1 (CTRL_STACK_CMD_POP1_PUSH0+1)
#define CTRL_STACK_CMD_POP1_PUSH1 (CTRL_STACK_CMD_POP0_PUSH1+1)
#define CTRL_STACK_CMD_POP2_PUSH1 (CTRL_STACK_CMD_POP1_PUSH1+1)
#define CTRL_STACK_CMD_POP2_PUSH2 (CTRL_STACK_CMD_POP2_PUSH1+1)
// ^ 2_2 for swap
// pop is done 'first'

#define CTRL_STACK_NR_CMD (CTRL_STACK_CMD_POP2_PUSH2+1)
#define CTRL_STACK_CMD_SIZE ($clog2(CTRL_STACK_NR_CMD) +1)


#define ISA_stack_operations_CTL_val_POP (0)
#define ISA_stack_operations_CTL_val_DUPLICATE (ISA_stack_operations_CTL_val_POP+1)
#define ISA_stack_operations_CTL_val_OVER (ISA_stack_operations_CTL_val_DUPLICATE+1)
#define ISA_stack_operations_CTL_val_SWAP (ISA_stack_operations_CTL_val_OVER+1)
#define ISA_stack_operations_CTL_val_LOAD_LAYRER1 (ISA_stack_operations_CTL_val_SWAP+1)

#define ISA_stack_operations_CTL_val_nr_bits ($clog2(ISA_stack_operations_CTL_val_LOAD_LAYRER1+1) +1)
#define ISA_stack_operations_CTL_val_LOC_UPPER ISA_stack_operations_CTL_val_nr_bits-1
#define ISA_stack_operations_CTL_val_LOC_LOWER 0
#define ISA_stack_operations_CTL_val_LOC CONCAT_VALUES(ISA_stack_operations_CTL_val_LOC_UPPER,ISA_stack_operations_CTL_val_LOC_LOWER)



/////////////////////////////////////////////////////////////////////////////////// scan net generation
#ifdef RESOURCE_NET_HAS_OPERATION_SUM_PREFIX
#ifndef RESOURCE_NET_HAS_OPERATION_ADD
#define RESOURCE_NET_HAS_OPERATION_ADD (1)
#endif
#endif

#ifdef RESOURCE_NET_HAS_OPERATION_bitwise_XOR_PREFIX
#ifndef RESOURCE_NET_HAS_OPERATION_bitwise_XOR
#define RESOURCE_NET_HAS_OPERATION_bitwise_XOR (1)
#endif
#endif

#ifdef RESOURCE_NET_HAS_OPERATION_bitwise_AND
#ifndef RESOURCE_NET_HAS_OPERATION_bitwise_OPERATIONS
#define RESOURCE_NET_HAS_OPERATION_bitwise_OPERATIONS (1)
#endif
#endif

#ifdef RESOURCE_NET_HAS_OPERATION_bitwise_OR
#ifndef RESOURCE_NET_HAS_OPERATION_bitwise_OPERATIONS
#define RESOURCE_NET_HAS_OPERATION_bitwise_OPERATIONS (1)
#endif
#endif

#ifdef RESOURCE_NET_HAS_OPERATION_bitwise_XOR
#ifndef RESOURCE_NET_HAS_OPERATION_bitwise_OPERATIONS
#define RESOURCE_NET_HAS_OPERATION_bitwise_OPERATIONS (1)
#endif
#endif

//if no operation defined, dont have a network
#ifndef RESOURCE_NET_HAS_OPERATION_ADD
#ifndef RESOURCE_NET_HAS_OPERATION_SUB
#ifndef RESOURCE_NET_HAS_OPERATION_MIN
#ifndef RESOURCE_NET_HAS_OPERATION_MAX
#ifndef RESOURCE_NET_HAS_OPERATION_SPLIT
#ifndef RESOURCE_NET_HAS_OPERATION_PERMUTE
#ifndef RESOURCE_NET_HAS_OPERATION_SUM_PREFIX
#ifndef RESOURCE_NET_HAS_OPERATION_bitwise_OPERATIONS
#ifndef RESOURCE_NET_HAS_ONLY_PERMUTE
undef RESOURCE_ARRAY_HAS_BW_SCAN_NET
undef RESOURCE_ARRAY_HAS_REDUCE_NET
#endif
#endif
#endif
#endif
#endif
#endif
#endif
#endif
#endif

// if only permute is selected. undefine all else
#ifdef RESOURCE_NET_HAS_ONLY_PERMUTE
#ifndef RESOURCE_NET_HAS_OPERATION_PERMUTE
#define RESOURCE_NET_HAS_OPERATION_PERMUTE (1)
#endif
#ifdef RESOURCE_NET_HAS_OPERATION_ADD
undef RESOURCE_NET_HAS_OPERATION_ADD
#endif
#ifdef RESOURCE_NET_HAS_OPERATION_SUB
undef RESOURCE_NET_HAS_OPERATION_SUB
#endif
#ifdef RESOURCE_NET_HAS_OPERATION_MIN
undef RESOURCE_NET_HAS_OPERATION_MIN
#endif
#ifdef RESOURCE_NET_HAS_OPERATION_MAX
undef RESOURCE_NET_HAS_OPERATION_MAX
#endif
#ifdef RESOURCE_NET_HAS_OPERATION_SPLIT
undef RESOURCE_NET_HAS_OPERATION_SPLIT
#endif
#ifdef RESOURCE_NET_HAS_OPERATION_SUM_PREFIX
undef RESOURCE_NET_HAS_OPERATION_SUM_PREFIX
#endif
#ifdef RESOURCE_NET_HAS_OPERATION_bitwise_AND
undef RESOURCE_NET_HAS_OPERATION_bitwise_AND
#endif
#ifdef RESOURCE_NET_HAS_OPERATION_bitwise_OR
undef RESOURCE_NET_HAS_OPERATION_bitwise_OR
#endif
#ifdef RESOURCE_NET_HAS_OPERATION_bitwise_XOR
undef RESOURCE_NET_HAS_OPERATION_bitwise_XOR
#endif
#ifdef RESOURCE_NET_HAS_OPERATION_bitwise_XOR_PREFIX
undef RESOURCE_NET_HAS_OPERATION_bitwise_XOR_PREFIX
#endif
#endif

// check if the full net is actually needed or reduce is enough
#ifdef RESOURCE_NET_HAS_OPERATION_SUM_PREFIX
#ifndef NET_HAS_PREFIX_OPERATIONS
#define NET_HAS_PREFIX_OPERATIONS (1)
#endif
#endif

#ifdef RESOURCE_NET_HAS_OPERATION_bitwise_XOR_PREFIX
#ifndef NET_HAS_PREFIX_OPERATIONS
#define NET_HAS_PREFIX_OPERATIONS (1)
#endif
#endif

#ifdef NET_HAS_PREFIX_OPERATIONS
#ifndef NET_RESOURCE_NEED_FULL_NET
#define NET_RESOURCE_NEED_FULL_NET (1)
#endif
#endif

#ifdef RESOURCE_NET_HAS_OPERATION_SPLIT
#ifndef NET_RESOURCE_NEED_FULL_NET
#define NET_RESOURCE_NEED_FULL_NET (1)
#endif
#endif

#ifdef RESOURCE_NET_HAS_OPERATION_PERMUTE
#ifndef NET_RESOURCE_NEED_FULL_NET
#define NET_RESOURCE_NEED_FULL_NET (1)
#endif
#endif

#ifdef NET_RESOURCE_NEED_FULL_NET
#else
#ifdef RESOURCE_ARRAY_HAS_BW_SCAN_NET
#undef RESOURCE_ARRAY_HAS_BW_SCAN_NET
#endif
#endif

// for adding; for total number of operations
#ifdef RESOURCE_NET_HAS_OPERATION_NOP
#define NET_HAS_OPERATION_NOP (1)
#else
#define NET_HAS_OPERATION_NOP (0)
#endif

#ifdef RESOURCE_NET_HAS_OPERATION_ADD
#define NET_HAS_OPERATION_ADD (1)
#else
#define NET_HAS_OPERATION_ADD (0)
#endif

#ifdef RESOURCE_NET_HAS_OPERATION_SUB
#define NET_HAS_OPERATION_SUB (1)
#else
#define NET_HAS_OPERATION_SUB (0)
#endif

#ifdef RESOURCE_NET_HAS_OPERATION_MIN
#define NET_HAS_OPERATION_MIN (1)
#else
#define NET_HAS_OPERATION_MIN (0)
#endif

#ifdef RESOURCE_NET_HAS_OPERATION_MAX
#define NET_HAS_OPERATION_MAX (1)
#else
#define NET_HAS_OPERATION_MAX (0)
#endif

#ifdef RESOURCE_NET_HAS_OPERATION_SPLIT
#define NET_HAS_OPERATION_SPLIT (1)
#else
#define NET_HAS_OPERATION_SPLIT (0)
#endif

#ifdef RESOURCE_NET_HAS_OPERATION_PERMUTE
#define NET_HAS_OPERATION_PERMUTE (1)
#else
#define NET_HAS_OPERATION_PERMUTE (0)
#endif

#ifdef RESOURCE_NET_HAS_OPERATION_SUM_PREFIX
#define NET_HAS_OPERATION_SUM_PREFIX (1)
#else
#define NET_HAS_OPERATION_SUM_PREFIX (0)
#endif

#ifdef RESOURCE_NET_HAS_OPERATION_bitwise_AND
#define NET_HAS_OPERATION_bitwise_AND (1)
#else
#define NET_HAS_OPERATION_bitwise_AND (0)
#endif

#ifdef RESOURCE_NET_HAS_OPERATION_bitwise_OR
#define NET_HAS_OPERATION_bitwise_OR (1)
#else
#define NET_HAS_OPERATION_bitwise_OR (0)
#endif

#ifdef RESOURCE_NET_HAS_OPERATION_bitwise_XOR
#define NET_HAS_OPERATION_bitwise_XOR (1)
#else
#define NET_HAS_OPERATION_bitwise_XOR (0)
#endif

#ifdef RESOURCE_NET_HAS_OPERATION_bitwise_XOR_PREFIX
#define NET_HAS_OPERATION_bitwise_XOR_PREFIX (1)
#else
#define NET_HAS_OPERATION_bitwise_XOR_PREFIX (0)
#endif
//^ not added in add below because prefix xor is made with normal xor => no difference in cell type 3
// as was the case in sum_prefix that needs subtract

/////////////////////////////////////////////////////////////////////////////////////////////////////////// scan net
#define NETWORK_NR_OPERATIONS (	NET_HAS_OPERATION_NOP+NET_HAS_OPERATION_ADD+NET_HAS_OPERATION_SUB+\
								NET_HAS_OPERATION_MIN+NET_HAS_OPERATION_MAX+NET_HAS_OPERATION_SPLIT+\
								NET_HAS_OPERATION_PERMUTE+NET_HAS_OPERATION_SUM_PREFIX+\
								NET_HAS_OPERATION_bitwise_OR+NET_HAS_OPERATION_bitwise_AND+NET_HAS_OPERATION_bitwise_XOR)

#define NETWORK_WIDTH (ARRAY_NR_CELLS/2)
//^ measured in cells
#define NETWORK_NR_INPUTS (NETWORK_WIDTH * 2)
#define NETWORK_DEPTH ($clog2(NETWORK_NR_INPUTS) * 2 - 1)
//^ measured in cells
#define NETWORK_SCAN_ENABLE_SIZE ($clog2(NETWORK_NR_INPUTS))
#define NETWORK_BW_BITS_SIZE (NETWORK_DEPTH)
#define NETWORK_NR_OPCODE_BITS ($clog2((NETWORK_NR_OPERATIONS<2) ? 2:NETWORK_NR_OPERATIONS))
#define NETWORK_NR_OPCODES (NETWORK_NR_OPERATIONS)

// 0 - continous load mem_out
// 1 - continous load shift_reg
// 2 - one_shot load mem_out
// 3 - one_shot load shift_reg
#define NETWORK_SCAN_MODE_CONTINOUS_LOAD_MEM_OUT (0)
#define NETWORK_SCAN_MODE_CONTINOUS_LOAD_SHIFT_REG (NETWORK_SCAN_MODE_CONTINOUS_LOAD_MEM_OUT+1)
#define NETWORK_SCAN_MODE_ONE_SHOT_LOAD_MEM_OUT (NETWORK_SCAN_MODE_CONTINOUS_LOAD_SHIFT_REG+1)
#define NETWORK_SCAN_MODE_ONE_SHOT_LOAD_SHIFT_REG (NETWORK_SCAN_MODE_ONE_SHOT_LOAD_MEM_OUT+1)
#define NETWORK_SCAN_MODES (NETWORK_SCAN_MODE_ONE_SHOT_LOAD_SHIFT_REG+1)
#define NETWORK_SCAN_MODES_NR_BITS ($clog2(NETWORK_SCAN_MODES) +1)


//network cell types	- do not edit
#define NETWORK_CELL_TYPE_PERMUTE_SPLIT (0)
#define NETWORK_CELL_TYPE_REDUCE_W_LEFT_ZERO (NETWORK_CELL_TYPE_PERMUTE_SPLIT+1)
#define NETWORK_CELL_TYPE_REDUCE_W_LEFT_ONE (NETWORK_CELL_TYPE_REDUCE_W_LEFT_ZERO+1)
#define NETWORK_CELL_TYPE_PREFIX_SPECIAL (NETWORK_CELL_TYPE_REDUCE_W_LEFT_ONE+1)
#define NETWORK_CELL_TYPE_ONLY_PERMUTE (NETWORK_CELL_TYPE_PREFIX_SPECIAL+1)

// network op codes: - do not edit
#define NETWORK_OP_NOP (0)
#define NETWORK_OP_ADD (NETWORK_OP_NOP + NET_HAS_OPERATION_ADD*1)
#define NETWORK_OP_SUB (NETWORK_OP_ADD + NET_HAS_OPERATION_SUB*1)
#define NETWORK_OP_MIN (NETWORK_OP_SUB + NET_HAS_OPERATION_MIN*1)
#define NETWORK_OP_MAX (NETWORK_OP_MIN + NET_HAS_OPERATION_MAX*1)
#define NETWORK_OP_SPLIT (NETWORK_OP_MAX + NET_HAS_OPERATION_SPLIT*1)
#define NETWORK_OP_PERMUTE (NETWORK_OP_SPLIT + NET_HAS_OPERATION_PERMUTE*1)
#define NETWORK_OP_bitwise_OR (NETWORK_OP_PERMUTE + NET_HAS_OPERATION_bitwise_OR*1)
#define NETWORK_OP_bitwise_AND (NETWORK_OP_bitwise_OR + NET_HAS_OPERATION_bitwise_AND*1)
#define NETWORK_OP_bitwise_XOR (NETWORK_OP_bitwise_AND + NET_HAS_OPERATION_bitwise_XOR*1)
#define NETWORK_OP_SUM_PREFIX (NETWORK_OP_ADD)
#define NETWORK_OP_bitwise_XOR_PREFIX (NETWORK_OP_bitwise_XOR)

//////////////////////////////////////////////////////////////////////////////////////////////// array

#ifdef RESOURCE_ARRAY_CELL_HAS_SHIFT
#ifndef RESOURCE_ARRAY_CELL_HAS_ROTATE
#define RESOURCE_ARRAY_CELL_HAS_ROTATE (1)
#endif
#endif



#ifdef RESOURCE_ARRAY_HAS_BW_SCAN_NET
#define HAS_ARRAY_CELL_OPSEL_sel_SCANOUT (1)
#else
#define HAS_ARRAY_CELL_OPSEL_sel_SCANOUT (0)
#endif

#ifdef RESOURCE_ARRAY_HAS_GLOBAL_SHIFT_REG
#define HAS_ARRAY_CELL_OPSEL_sel_GLOBAL_SHIFT_REG (1)
#else
#define HAS_ARRAY_CELL_OPSEL_sel_GLOBAL_SHIFT_REG (0)
#endif

#ifdef RESOURCE_ARRAY_CELL_HAS_ROTATE
#define HAS_ARRAY_CELL_OPSEL_sel_ROT_SH_OUT (1)
#else
#define HAS_ARRAY_CELL_OPSEL_sel_ROT_SH_OUT (0)
#endif

#ifdef RESOURCE_ARRAY_CELL_HAS_STACK
#define HAS_ARRAY_CELL_OPSEL_sel_STACK_LAYER1 (1)
#else
#define HAS_ARRAY_CELL_OPSEL_sel_STACK_LAYER1 (0)
#endif

#ifdef RESOURCE_ARRAY_CELL_HAS_SHIFT_RIGHT_FIXED_AMOUNT
#define HAS_ARRAY_CELL_OPSEL_sel_SHR_FIXED_AMOUNT (1)
#else
#define HAS_ARRAY_CELL_OPSEL_sel_SHR_FIXED_AMOUNT (0)
#endif

#ifdef RESOURCE_ARRAY_CELL_HAS_FLOATING_POINT
#define HAS_ARRAY_CELL_OPSEL_sel_FLOATING_POINT (1)
#else
#define HAS_ARRAY_CELL_OPSEL_sel_FLOATING_POINT (0)
#endif


#define ARRAY_CELL_SHIFT_MSBSEL_CARRY (0)
#define ARRAY_CELL_SHIFT_MSBSEL_ZERO (ARRAY_CELL_SHIFT_MSBSEL_CARRY+1)
#define ARRAY_CELL_SHIFT_MSBSEL_ACCMSB (ARRAY_CELL_SHIFT_MSBSEL_ZERO+1)

#define ARRAY_CELL_SHIFT_MSBSEL_NR (ARRAY_CELL_SHIFT_MSBSEL_ACCMSB+1)
#define ARRAY_CELL_SHIFT_MSBSEL_NR_BITS ($clog2(ARRAY_CELL_SHIFT_MSBSEL_NR) +1)

#define ARRAY_CELL_OPSEL_sel_MEMOUT (0)
#define ARRAY_CELL_OPSEL_sel_DISTRVALUE (ARRAY_CELL_OPSEL_sel_MEMOUT+1)
#define ARRAY_CELL_OPSEL_sel_INDEX (ARRAY_CELL_OPSEL_sel_DISTRVALUE+1)
#define ARRAY_CELL_OPSEL_sel_SHR1 (ARRAY_CELL_OPSEL_sel_INDEX+1)
#define ARRAY_CELL_OPSEL_sel_GLOBAL_SHIFT_REG (ARRAY_CELL_OPSEL_sel_SHR1+HAS_ARRAY_CELL_OPSEL_sel_GLOBAL_SHIFT_REG*1)
#define ARRAY_CELL_OPSEL_sel_SCANOUT (ARRAY_CELL_OPSEL_sel_GLOBAL_SHIFT_REG+1*HAS_ARRAY_CELL_OPSEL_sel_SCANOUT)
#define ARRAY_CELL_OPSEL_sel_ROT_SH_OUT (ARRAY_CELL_OPSEL_sel_SCANOUT+HAS_ARRAY_CELL_OPSEL_sel_ROT_SH_OUT*1)
#define ARRAY_CELL_OPSEL_sel_STACK_LAYER1 (ARRAY_CELL_OPSEL_sel_ROT_SH_OUT+HAS_ARRAY_CELL_OPSEL_sel_STACK_LAYER1*1)
#define ARRAY_CELL_OPSEL_sel_SHR_FIXED_AMOUNT (ARRAY_CELL_OPSEL_sel_STACK_LAYER1+ HAS_ARRAY_CELL_OPSEL_sel_SHR_FIXED_AMOUNT*1)
#define ARRAY_CELL_OPSEL_sel_FLOAT_MANTISSA (ARRAY_CELL_OPSEL_sel_SHR_FIXED_AMOUNT+ HAS_ARRAY_CELL_OPSEL_sel_FLOATING_POINT*1)

#define ARRAY_CELL_OPSEL_NR_OPSEL (ARRAY_CELL_OPSEL_sel_FLOAT_MANTISSA + 1)
#define ARRAY_CELL_OPSEL_NR_BITS ( $clog2(ARRAY_CELL_OPSEL_NR_OPSEL) +1)

#define ARRAY_CELL_COMMAND_addrLoad_NR_BITS_unguarded 3
#define ARRAY_CELL_COMMAND_addrLoad_NR_BITS (ARRAY_CELL_COMMAND_addrLoad_NR_BITS_unguarded)
#define ARRAY_CELL_COMMAND_addrLoad_NR_BITS_LOC_UPPER ARRAY_CELL_COMMAND_addrLoad_NR_BITS_unguarded-1
#define ARRAY_CELL_COMMAND_addrLoad_NR_BITS_LOC_LOWER 0
#define ARRAY_CELL_COMMAND_addrLoad_NR_BITS_LOC ARRAY_CELL_COMMAND_addrLoad_NR_BITS_LOC_UPPER,ARRAY_CELL_COMMAND_addrLoad_NR_BITS_LOC_LOWER

#define ARRAY_CELL_COMMAND_addrLoad_NO (0)
#define ARRAY_CELL_COMMAND_addrLoad_ACC (ARRAY_CELL_COMMAND_addrLoad_NO+1)
#define ARRAY_CELL_COMMAND_addrAdd_ACC (ARRAY_CELL_COMMAND_addrLoad_ACC+1)
#define ARRAY_CELL_COMMAND_addrLoad_DISTR_VAL (ARRAY_CELL_COMMAND_addrAdd_ACC+1)
#define ARRAY_CELL_COMMAND_addrRegCmdDuplicate (ARRAY_CELL_COMMAND_addrLoad_DISTR_VAL+1)
#define ARRAY_CELL_COMMAND_addrRegCmdPOP (ARRAY_CELL_COMMAND_addrRegCmdDuplicate+1)


//////////////////////////////////////////////////////////////////////////////////////////////////// array decode location

#ifndef ARRAY_DECODE_LOCATION_in_or_pre_MUTLICELL
#ifdef ARRAY_DECODE_LOCATION_CONTROLLER
#define ARRAY_DECODE_LOCATION_in_or_pre_MUTLICELL (1)
#endif
#endif

#ifndef ARRAY_DECODE_LOCATION_in_or_pre_MUTLICELL
#ifdef ARRAY_DECODE_LOCATION_MULTICELL
#define ARRAY_DECODE_LOCATION_in_or_pre_MUTLICELL (1)
#endif
#endif


#ifndef ARRAY_DECODE_LOCATION_in_or_pre_PARTIAL_MULTICELL
#ifdef ARRAY_DECODE_LOCATION_in_or_pre_MUTLICELL
#define ARRAY_DECODE_LOCATION_in_or_pre_PARTIAL_MULTICELL (1)
#endif
#endif

#ifndef ARRAY_DECODE_LOCATION_in_or_pre_PARTIAL_MULTICELL
#ifdef ARRAY_DECODE_LOCATION_PARTIAL_MULTICELL
#define ARRAY_DECODE_LOCATION_in_or_pre_PARTIAL_MULTICELL (1)
#endif
#endif


#ifndef ARRAY_DECODE_LOCATION_in_or_pre_ELEM_CELL
#ifdef ARRAY_DECODE_LOCATION_in_or_pre_PARTIAL_MULTICELL
#define ARRAY_DECODE_LOCATION_in_or_pre_ELEM_CELL (1)
#endif
#endif

#ifndef ARRAY_DECODE_LOCATION_in_or_pre_ELEM_CELL
#ifdef ARRAY_DECODE_LOCATION_ELEM_CELL
#define ARRAY_DECODE_LOCATION_in_or_pre_ELEM_CELL (1)
#endif
#endif


//////////////////////////////////////////////////////////////////////////////////////////////////// controller


#ifdef RESOURCE_CTRL_HAS_FLOATING_POINT
#define HAS_CTRL_OPSEL_sel_FLOATING_POINT (1)
#else
#define HAS_CTRL_OPSEL_sel_FLOATING_POINT (0)
#endif

#define CTRL_SHIFT_MSBSEL_CARRY (0)
#define CTRL_SHIFT_MSBSEL_ZERO (CTRL_SHIFT_MSBSEL_CARRY+1)
#define CTRL_SHIFT_MSBSEL_ACCMSB (CTRL_SHIFT_MSBSEL_ZERO+1)

#define CTRL_SHIFT_MSBSEL_NR (CTRL_SHIFT_MSBSEL_ACCMSB+1)
#define CTRL_SHIFT_MSBSEL_NR_BITS ($clog2(CTRL_SHIFT_MSBSEL_NR) +1)

#define CTRL_OPSEL_sel_MEMOUT (0)
#define CTRL_OPSEL_sel_REDUCTIONOUT (CTRL_OPSEL_sel_MEMOUT+1)
#define CTRL_OPSEL_sel_ADDR_REG (CTRL_OPSEL_sel_REDUCTIONOUT+1)
#define CTRL_OPSEL_sel_SCALAR (CTRL_OPSEL_sel_ADDR_REG+1)
#define CTRL_OPSEL_sel_ACC_and_SCALAR (CTRL_OPSEL_sel_SCALAR+1)
#define CTRL_OPSEL_sel_PROG (CTRL_OPSEL_sel_ACC_and_SCALAR+1)
#define CTRL_OPSEL_sel_LOOP_COUNTER_DECREMENT (CTRL_OPSEL_sel_PROG+1)
#define CTRL_OPSEL_sel_SHR1 (CTRL_OPSEL_sel_LOOP_COUNTER_DECREMENT+1)
#define CTRL_OPSEL_sel_ZERO (CTRL_OPSEL_sel_SHR1+1)
#define CTRL_OPSEL_sel_ROT_SH_OUT (CTRL_OPSEL_sel_ZERO+1)
#define CTRL_OPSEL_sel_STACK_LAYER1 (CTRL_OPSEL_sel_ROT_SH_OUT+1)
#define CTRL_OPSEL_sel_SHR_FIXED_AMOUNT (CTRL_OPSEL_sel_STACK_LAYER1+1)
#define CTRL_OPSEL_sel_FLOAT_MANTISSA (CTRL_OPSEL_sel_SHR_FIXED_AMOUNT+ HAS_CTRL_OPSEL_sel_FLOATING_POINT*1)

#define CTRL_OPSEL_NR_OPSEL (CTRL_OPSEL_sel_FLOAT_MANTISSA + 1)
#define CTRL_OPSEL_NR_BITS ( $clog2(CTRL_OPSEL_NR_OPSEL) +1)




////////////////////////////////////////////////////////////////////////////////////////////////////// DMA + data transfer engine

#define DTE_NR_PARAMETERS_PER_COMMAND (4)
#define DTE_PARAM_FIFO_ADDR_NR_BITS ($clog2(DTE_NR_PARAMETERS_PER_COMMAND*DTE_FIFO_SIZE_NR_COMMANDS) +1)
#define DTE_PARAM_NR_BITS (IO_INTF_PROG_NR_BITS)
#define DTE_COLUMN_COUNTER_NR_BITS ($clog2(NR_MULTICELLS*NR_PARTIAL_MULTICELLS_PER_MULTICELL) +1)
#define DTE_ADDR_NR_BITS (ARRAY_CELL_MEM_NR_BITS)
#define DTE_PARAM_FIFO_SIZE (1 << DTE_PARAM_FIFO_ADDR_NR_BITS )

#define DTE_CMD_REG_READ_FLAG_NR_BITS (1)
#define DTE_CMD_REG_OPCODE_NR_BITS  (INSTR_OPCODE_NR_BITS)

#define DTE_CMD_REG_READ_FLAG_LOC_UPPER DTE_CMD_REG_READ_FLAG_NR_BITS-1
#define DTE_CMD_REG_READ_FLAG_LOC_LOWER 0
#define DTE_CMD_REG_OPCODE_LOC_UPPER DTE_CMD_REG_OPCODE_NR_BITS+DTE_CMD_REG_READ_FLAG_NR_BITS-1
#define DTE_CMD_REG_OPCODE_LOC_LOWER DTE_CMD_REG_READ_FLAG_NR_BITS

#define DTE_CMD_REG_READ_FLAG_LOC CONCAT_VALUES(DTE_CMD_REG_READ_FLAG_LOC_UPPER,DTE_CMD_REG_READ_FLAG_LOC_LOWER)
#define DTE_CMD_REG_OPCODE_LOC CONCAT_VALUES(DTE_CMD_REG_OPCODE_LOC_UPPER,DTE_CMD_REG_OPCODE_LOC_LOWER)

#define DTE_CMD_REG_NR_BITS (DTE_CMD_REG_OPCODE_NR_BITS+DTE_CMD_REG_READ_FLAG_NR_BITS)


#define DTE_STATE_IDLE 0
#define DTE_STATE_LOAD_PARAMS (DTE_STATE_IDLE + 1)
#define DTE_STATE_WRITE_LINE (DTE_STATE_LOAD_PARAMS + 1)
#define DTE_STATE_REQ_WRITE (DTE_STATE_WRITE_LINE + 1)
#define DTE_STATE_WAIT_WR_ACK (DTE_STATE_REQ_WRITE + 1)
#define DTE_STATE_REQ_READ (DTE_STATE_WAIT_WR_ACK + 1)
#define DTE_STATE_WAIT_RD_ACK (DTE_STATE_REQ_READ + 1)
#define DTE_STATE_READ_LINE (DTE_STATE_WAIT_RD_ACK + 1)

#define DTE_STATE_NR_BITS ($clog2(DTE_STATE_READ_LINE+1) +1)






/////////////////////////////////////////////////////////////////////////////////////////////////////////// ISA part 2
#define INSTR_VALUE_LOC_UPPER INSTR_VALUE_NR_BITS-1
#define INSTR_VALUE_LOC_LOWER 0
#define INSTR_OPERAND_LOC_UPPER      26
#define INSTR_OPERAND_LOC_LOWER      24
#define INSTR_OPCODE_LOC_UPPER       31
#define INSTR_OPCODE_LOC_LOWER       27

#define INSTR_VALUE_LOC CONCAT_VALUES(INSTR_VALUE_LOC_UPPER,INSTR_VALUE_LOC_LOWER)
#define INSTR_OPERAND_LOC INSTR_OPERAND_LOC_UPPER:INSTR_OPERAND_LOC_LOWER
#define INSTR_OPCODE_LOC INSTR_OPCODE_LOC_UPPER,INSTR_OPCODE_LOC_LOWER)
#define INSTR_VALUE_LOC_START INSTR_VALUE_NR_BITS-1
#define INSTR_OPERAND_LOC_START INSTR_OPERAND_NR_BITS + INSTR_VALUE_NR_BITS
#define INSTR_OPCODE_LOC_START INSTR_OPCODE_NR_BITS + INSTR_OPERAND_NR_BITS + INSTR_VALUE_NR_BITS
// ^ controller

// #define INSTR_ARRAY_VALUE_LOC INSTR_VALUE_NR_BITS-1##0 not applicable
#define INSTR_ARRAY_OPERAND_LOC_UPPER INSTR_OPERAND_NR_BITS-1
#define INSTR_ARRAY_OPERAND_LOC_LOWER 0
#define INSTR_ARRAY_OPCODE_LOC_UPPER INSTR_OPCODE_NR_BITS+INSTR_OPERAND_NR_BITS-1
#define INSTR_ARRAY_OPCODE_LOC_LOWER INSTR_OPERAND_NR_BITS

#define INSTR_ARRAY_OPERAND_LOC CONCAT_VALUES(INSTR_ARRAY_OPERAND_LOC_UPPER,INSTR_ARRAY_OPERAND_LOC_LOWER)
#define INSTR_ARRAY_OPCODE_LOC CONCAT_VALUES(INSTR_ARRAY_OPCODE_LOC_UPPER,INSTR_ARRAY_OPCODE_LOC_LOWER)
// ^ array; split like this because in array {opcode,operand} and "scalar_value" are separate

#define INSTR_ARRAY_LOC_UPPER INSTR_NR_BITS-1
#define INSTR_ARRAY_LOC_LOWER 0
#define INSTR_CONTROLLER_LOC_UPPER DOUBLE_INSTR_NR_BITS-1
#define INSTR_CONTROLLER_LOC_LOWER INSTR_NR_BITS

#define INSTR_ARRAY_LOC CONCAT_VALUES(INSTR_ARRAY_LOC_UPPER,INSTR_ARRAY_LOC_LOWER)
#define INSTR_CONTROLLER_LOC CONCAT_VALUES(INSTR_CONTROLLER_LOC_UPPER,INSTR_CONTROLLER_LOC_LOWER)
// ^ din instr mare care se citeste din memorie
// instruction specific
// array spatial selects

#define INSTR_SPATIAL_SELECT_FUNCTION_ACTIVATE (0)
#define INSTR_SPATIAL_SELECT_FUNCTION_WHERE (INSTR_SPATIAL_SELECT_FUNCTION_ACTIVATE+1)
#define INSTR_SPATIAL_SELECT_FUNCTION_ELSEWHERE (INSTR_SPATIAL_SELECT_FUNCTION_WHERE+1)
#define INSTR_SPATIAL_SELECT_FUNCTION_ENDWHERE (INSTR_SPATIAL_SELECT_FUNCTION_ELSEWHERE+1)

#define INSTR_SPATIAL_SELECT_WHERE_COND_WHERENZERO (0)
#define INSTR_SPATIAL_SELECT_WHERE_COND_WHEREZERO (INSTR_SPATIAL_SELECT_WHERE_COND_WHERENZERO+1)
#define INSTR_SPATIAL_SELECT_WHERE_COND_WHERENCARRY (INSTR_SPATIAL_SELECT_WHERE_COND_WHEREZERO+1)
#define INSTR_SPATIAL_SELECT_WHERE_COND_WHERECARRY (INSTR_SPATIAL_SELECT_WHERE_COND_WHERENCARRY+1)
#define INSTR_SPATIAL_SELECT_WHERE_COND_WHERESGN (INSTR_SPATIAL_SELECT_WHERE_COND_WHERECARRY+1)
#define INSTR_SPATIAL_SELECT_WHERE_COND_WHERENSGN (INSTR_SPATIAL_SELECT_WHERE_COND_WHERESGN+1)
#define INSTR_SPATIAL_SELECT_WHERE_COND_WHERENFIRST (INSTR_SPATIAL_SELECT_WHERE_COND_WHERENSGN+1)
#define INSTR_SPATIAL_SELECT_WHERE_COND_WHEREFIRST (INSTR_SPATIAL_SELECT_WHERE_COND_WHERENFIRST+1)
#define INSTR_SPATIAL_SELECT_WHERE_COND_WHERENNEXT (INSTR_SPATIAL_SELECT_WHERE_COND_WHEREFIRST+1)
#define INSTR_SPATIAL_SELECT_WHERE_COND_WHERENEXT (INSTR_SPATIAL_SELECT_WHERE_COND_WHERENNEXT+1)
#define INSTR_SPATIAL_SELECT_WHERE_COND_WHERENPREV (INSTR_SPATIAL_SELECT_WHERE_COND_WHERENEXT+1)
#define INSTR_SPATIAL_SELECT_WHERE_COND_WHEREPREV (INSTR_SPATIAL_SELECT_WHERE_COND_WHERENPREV+1)

#define INSTR_SPATIAL_SELECT_FUNCTION_NR_BITS ($clog2(INSTR_SPATIAL_SELECT_FUNCTION_ENDWHERE+1) +1)
#define INSTR_SPATIAL_SELECT_WHERE_COND_NR_CONDITIONS (INSTR_SPATIAL_SELECT_WHERE_COND_WHEREPREV+1)
#define INSTR_SPATIAL_SELECT_WHERE_COND_NR_BITS ($clog2(INSTR_SPATIAL_SELECT_WHERE_COND_NR_CONDITIONS) +1)

#define INSTR_SPATIAL_SELECT_FUNCTION_LOC_UPPER INSTR_SPATIAL_SELECT_FUNCTION_NR_BITS-1
#define INSTR_SPATIAL_SELECT_FUNCTION_LOC_LOWER 0
#define INSTR_SPATIAL_SELECT_WHERE_COND_LOC_UPPER INSTR_SPATIAL_SELECT_WHERE_COND_NR_BITS+INSTR_SPATIAL_SELECT_FUNCTION_NR_BITS-1
#define INSTR_SPATIAL_SELECT_WHERE_COND_LOC_LOWER INSTR_SPATIAL_SELECT_FUNCTION_NR_BITS

#define INSTR_SPATIAL_SELECT_FUNCTION_LOC CONCAT_VALUES(INSTR_SPATIAL_SELECT_FUNCTION_LOC_UPPER,INSTR_SPATIAL_SELECT_FUNCTION_LOC_LOWER)
#define INSTR_SPATIAL_SELECT_WHERE_COND_LOC CONCAT_VALUES(INSTR_SPATIAL_SELECT_WHERE_COND_LOC_UPPER,INSTR_SPATIAL_SELECT_WHERE_COND_LOC_LOWER)

// testing specific instructions
#define INSTR_MISC_TESTING_SEL_CC_START_W_HALT (0)
#define INSTR_MISC_TESTING_SEL_CC_START_WO_HALT (INSTR_MISC_TESTING_SEL_CC_START_W_HALT+1)
#define INSTR_MISC_TESTING_SEL_CC_STOP (INSTR_MISC_TESTING_SEL_CC_START_WO_HALT+1)
#define INSTR_MISC_TESTING_SEL_CC_RESET (INSTR_MISC_TESTING_SEL_CC_STOP+1)


#define INSTR_MISC_TESTING_SEL_NR_BITS ($clog2(INSTR_MISC_TESTING_SEL_CC_RESET+1) +1)
#define INSTR_MISC_TESTING_SEL_LOC_UPPER INSTR_MISC_TESTING_SEL_NR_BITS-1
#define INSTR_MISC_TESTING_SEL_LOC_LOWER 0
#define INSTR_MISC_TESTING_SEL_LOC CONCAT_VALUES(INSTR_MISC_TESTING_SEL_LOC_UPPER,INSTR_MISC_TESTING_SEL_LOC_LOWER)


// fixed shift/rotate
#define INSTR_SHIFT1_RIGHT (0)
#define INSTR_SHIFT1_RIGHT_CARRY (INSTR_SHIFT1_RIGHT+1)
#define INSTR_SHIFT1_RIGHT_ARITHMETIC (INSTR_SHIFT1_RIGHT_CARRY+1)
#define INSTR_SHIFT_RIGHT_FIXED_AMOUNT (INSTR_SHIFT1_RIGHT_ARITHMETIC+1)
#define INSTR_SHIFT_RIGHT_FIXED_AMOUNT_ARITHMETIC (INSTR_SHIFT_RIGHT_FIXED_AMOUNT+1)

#define INSTR_FIXED_SHIFTING_NR_BITS ($clog2(INSTR_SHIFT_RIGHT_FIXED_AMOUNT_ARITHMETIC+1) +1)
#define INSTR_FIXED_SHIFTING_LOC_UPPER INSTR_FIXED_SHIFTING_NR_BITS-1
#define INSTR_FIXED_SHIFTING_LOC_LOWER 0
#define INSTR_FIXED_SHIFTING_LOC CONCAT_VALUES(INSTR_FIXED_SHIFTING_LOC_UPPER,INSTR_FIXED_SHIFTING_LOC_LOWER)


// misc load/store
#define INSTR_MISC_STORE_LOAD_scanload (0)
#define INSTR_MISC_STORE_LOAD_ixload (INSTR_MISC_STORE_LOAD_scanload+1)
#define INSTR_MISC_STORE_LOAD_srload (INSTR_MISC_STORE_LOAD_ixload+1)
#define INSTR_MISC_STORE_LOAD_srstore (INSTR_MISC_STORE_LOAD_srload+1)
#define INSTR_MISC_STORE_LOAD_insertio (INSTR_MISC_STORE_LOAD_srstore+1)
#define INSTR_MISC_STORE_LOAD_redins (INSTR_MISC_STORE_LOAD_insertio+1)
#define INSTR_MISC_STORE_LOAD_setdec (INSTR_MISC_STORE_LOAD_redins+1)
#define INSTR_MISC_STORE_LOAD_addrload (INSTR_MISC_STORE_LOAD_setdec+1)
#define INSTR_MISC_STORE_LOAD_addrstore (INSTR_MISC_STORE_LOAD_addrload+1)
#define INSTR_MISC_STORE_LOAD_addrstore_COP (INSTR_MISC_STORE_LOAD_addrstore+1)
#define INSTR_MISC_STORE_LOAD_set_compare_value (INSTR_MISC_STORE_LOAD_addrstore_COP+1)
#define INSTR_MISC_STORE_LOAD_set_addrreg_selector (INSTR_MISC_STORE_LOAD_set_compare_value+1)
#define INSTR_MISC_STORE_LOAD_array_addr_reg_stack_duplicate (INSTR_MISC_STORE_LOAD_set_addrreg_selector + 1)
#define INSTR_MISC_STORE_LOAD_array_addr_reg_stack_pop (INSTR_MISC_STORE_LOAD_array_addr_reg_stack_duplicate + 1)

#define INSTR_MISC_STORE_LOAD_NR_BITS ($clog2(INSTR_MISC_STORE_LOAD_array_addr_reg_stack_pop+1) +1)
#define INSTR_MISC_STORE_LOAD_VALUE_NR_BITS (INSTR_VALUE_NR_BITS-INSTR_MISC_STORE_LOAD_NR_BITS)

#define INSTR_MISC_STORE_LOAD_LOC_UPPER INSTR_VALUE_NR_BITS-1
#define INSTR_MISC_STORE_LOAD_LOC_LOWER INSTR_MISC_STORE_LOAD_VALUE_NR_BITS
#define INSTR_MISC_STORE_LOAD_VALUE_LOC_UPPER INSTR_MISC_STORE_LOAD_VALUE_NR_BITS-1
#define INSTR_MISC_STORE_LOAD_VALUE_LOC_LOWER 0

#define INSTR_MISC_STORE_LOAD_LOC CONCAT_VALUES(INSTR_MISC_STORE_LOAD_LOC_UPPER,INSTR_MISC_STORE_LOAD_LOC_LOWER)
#define INSTR_MISC_STORE_LOAD_VALUE_LOC CONCAT_VALUES(INSTR_MISC_STORE_LOAD_VALUE_LOC_UPPER,INSTR_MISC_STORE_LOAD_VALUE_LOC_LOWER)

// global shifting
#define INSTR_GLOBAL_ROTATE_right (0)
#define INSTR_GLOBAL_ROTATE_left (INSTR_GLOBAL_ROTATE_right+1)

#define INSTR_GLOBAL_SHIFT_right_WOB (INSTR_GLOBAL_ROTATE_left+1)
#define INSTR_GLOBAL_SHIFT_right_WBZ (INSTR_GLOBAL_SHIFT_right_WOB+1)
#define INSTR_GLOBAL_SHIFT_right_WBH (INSTR_GLOBAL_SHIFT_right_WBZ+1)

#define INSTR_GLOBAL_SHIFT_left_WOB (INSTR_GLOBAL_SHIFT_right_WBH+1)
#define INSTR_GLOBAL_SHIFT_left_WBZ (INSTR_GLOBAL_SHIFT_left_WOB+1)
#define INSTR_GLOBAL_SHIFT_left_WBH (INSTR_GLOBAL_SHIFT_left_WBZ+1)

#define INSTR_GLOBAL_LEFT_INS (INSTR_GLOBAL_SHIFT_left_WBH+1)
#define INSTR_GLOBAL_LEFT_RED_INS (INSTR_GLOBAL_LEFT_INS+1)
#define INSTR_GLOBAL_RIGHT_INS (INSTR_GLOBAL_LEFT_RED_INS+1)
#define INSTR_GLOBAL_RIGHT_RED_INS (INSTR_GLOBAL_RIGHT_INS+1)

#define INSTR_GLOBAL_NR_BITS ($clog2(INSTR_GLOBAL_RIGHT_RED_INS+1) +1)
#define INSTR_GLOBAL_LOC_UPPER INSTR_GLOBAL_NR_BITS-1
#define INSTR_GLOBAL_LOC_LOWER 0
#define INSTR_GLOBAL_LOC CONCAT_VALUES(INSTR_GLOBAL_LOC_UPPER,INSTR_GLOBAL_LOC_LOWER)



// array local shift/rotate
#define INSTR_SH_ROTATE_LOCAL_AMOUNT_NR_BITS_unguarded $clog2(DATA_SIZE)
#define INSTR_SH_ROTATE_LOCAL_SPLIT_POINT_NR_BITS_unguarded $clog2(DATA_SIZE)
#define INSTR_SH_ROTATE_LOCAL_AMOUNT_NR_BITS (INSTR_SH_ROTATE_LOCAL_AMOUNT_NR_BITS_unguarded)
#define INSTR_SH_ROTATE_LOCAL_SPLIT_POINT_NR_BITS (INSTR_SH_ROTATE_LOCAL_SPLIT_POINT_NR_BITS_unguarded)
#define INSTR_SH_ROTATE_LOCAL_CTRL_BITS_NR_BITS_unguarded 2
#define INSTR_SH_ROTATE_LOCAL_CTRL_BITS_NR_BITS (INSTR_SH_ROTATE_LOCAL_CTRL_BITS_NR_BITS_unguarded)

#define INSTR_SH_ROTATE_LOCAL_DIRECTION_BIT_LOC_UPPER INSTR_VALUE_LOC_START
#define INSTR_SH_ROTATE_LOCAL_DIRECTION_BIT_LOC_LOWER INSTR_VALUE_LOC_START
#define INSTR_SH_ROTATE_LOCAL_MODE_BIT_LOC_UPPER INSTR_VALUE_LOC_START-1
#define INSTR_SH_ROTATE_LOCAL_MODE_BIT_LOC_LOWER INSTR_VALUE_LOC_START-1
#define INSTR_SH_ROTATE_LOCAL_SPLIT_POINT_LOC_UPPER INSTR_VALUE_LOC_START-2
#define INSTR_SH_ROTATE_LOCAL_SPLIT_POINT_LOC_LOWER INSTR_VALUE_LOC_START-2+1-INSTR_SH_ROTATE_LOCAL_SPLIT_POINT_NR_BITS
#define INSTR_SH_ROTATE_LOCAL_SHIFT_AMOUNT_LOC_UPPER INSTR_VALUE_LOC_START-2+1-INSTR_SH_ROTATE_LOCAL_SPLIT_POINT_NR_BITS-1
#define INSTR_SH_ROTATE_LOCAL_SHIFT_AMOUNT_LOC_LOWER INSTR_VALUE_LOC_START-2+1-INSTR_SH_ROTATE_LOCAL_SPLIT_POINT_NR_BITS-1-INSTR_SH_ROTATE_LOCAL_AMOUNT_NR_BITS+1

#define INSTR_SH_ROTATE_LOCAL_DIRECTION_BIT_LOC CONCAT_VALUES(INSTR_SH_ROTATE_LOCAL_DIRECTION_BIT_LOC_UPPER,INSTR_SH_ROTATE_LOCAL_DIRECTION_BIT_LOC_LOWER)
#define INSTR_SH_ROTATE_LOCAL_MODE_BIT_LOC CONCAT_VALUES(INSTR_SH_ROTATE_LOCAL_MODE_BIT_LOC_UPPER,INSTR_SH_ROTATE_LOCAL_MODE_BIT_LOC_LOWER)
#define INSTR_SH_ROTATE_LOCAL_SPLIT_POINT_LOC CONCAT_VALUES(INSTR_SH_ROTATE_LOCAL_SPLIT_POINT_LOC_UPPER,INSTR_SH_ROTATE_LOCAL_SPLIT_POINT_LOC_LOWER)
#define INSTR_SH_ROTATE_LOCAL_SHIFT_AMOUNT_LOC CONCAT_VALUES(INSTR_SH_ROTATE_LOCAL_SHIFT_AMOUNT_LOC_UPPER,INSTR_SH_ROTATE_LOCAL_SHIFT_AMOUNT_LOC_LOWER)

// control bits for shift/rotate (array and controller)
#define INSTR_SH_ROT_CTRL_bits_DONT_CARE(x,delimiter) "x##delimiter##b00" // x = INSTR_SH_ROTATE_LOCAL_CTRL_BITS_NR_BITS_unguarded
#define INSTR_SH_ROT_CTRL_bits_LEFT_SHIFT(x,delimiter) "x##delimiter##b00" // x = INSTR_SH_ROTATE_LOCAL_CTRL_BITS_NR_BITS_unguarded
#define INSTR_SH_ROT_CTRL_bits_RIGHT_SHIFT(x,delimiter) "x##delimiter##b10" // x = INSTR_SH_ROTATE_LOCAL_CTRL_BITS_NR_BITS_unguarded
#define INSTR_SH_ROT_CTRL_bits_LEFT_ROTATE(x,delimiter) "x##delimiter##b01" // x = INSTR_SH_ROTATE_LOCAL_CTRL_BITS_NR_BITS_unguarded
#define INSTR_SH_ROT_CTRL_bits_RIGHT_ROTATE(x,delimiter) "x##delimiter##b11" // x = INSTR_SH_ROTATE_LOCAL_CTRL_BITS_NR_BITS_unguarded
// bit[1]: 1 right; 0 left  + //bit[0]: 1 rotate; 0 shift

// scan/permute network
#define INSTR_SETSCAN_OPCODE_LOC_UPPER NETWORK_NR_OPCODE_BITS-1
#define INSTR_SETSCAN_OPCODE_LOC_LOWER 0
#define INSTR_SETSCAN_ADDR_MODE_LOC_UPPER NETWORK_NR_OPCODE_BITS+NETWORK_SCAN_MODES_NR_BITS-1
#define INSTR_SETSCAN_ADDR_MODE_LOC_LOWER NETWORK_NR_OPCODE_BITS

#define INSTR_SETSCAN_OPCODE_LOC CONCAT_VALUES(INSTR_SETSCAN_OPCODE_LOC_UPPER,INSTR_SETSCAN_OPCODE_LOC_LOWER)
#define INSTR_SETSCAN_ADDR_MODE_LOC CONCAT_VALUES(INSTR_SETSCAN_ADDR_MODE_LOC_UPPER,INSTR_SETSCAN_ADDR_MODE_LOC_LOWER)

// jumps
#define INSTR_JMP_FUNCTION_JMP (0)
#define INSTR_JMP_FUNCTION_BRZ (INSTR_JMP_FUNCTION_JMP+1)
#define INSTR_JMP_FUNCTION_BRNZ (INSTR_JMP_FUNCTION_BRZ+1)
#define INSTR_JMP_FUNCTION_BRSGN (INSTR_JMP_FUNCTION_BRNZ+1)
#define INSTR_JMP_FUNCTION_BRNSGN (INSTR_JMP_FUNCTION_BRSGN+1)
#define INSTR_JMP_FUNCTION_BRZDEC (INSTR_JMP_FUNCTION_BRNSGN+1)
#define INSTR_JMP_FUNCTION_BRNZDEC (INSTR_JMP_FUNCTION_BRZDEC+1)
#define INSTR_JMP_FUNCTION_BRBOOL (INSTR_JMP_FUNCTION_BRNZDEC+1)
#define INSTR_JMP_FUNCTION_BRNBOOL (INSTR_JMP_FUNCTION_BRBOOL+1)
#define INSTR_JMP_FUNCTION_BRCR (INSTR_JMP_FUNCTION_BRNBOOL+1)
#define INSTR_JMP_FUNCTION_BRNCR (INSTR_JMP_FUNCTION_BRCR+1)
#define INSTR_JMP_FUNCTION_BRVal (INSTR_JMP_FUNCTION_BRNCR+1)
#define INSTR_JMP_FUNCTION_BRNVal (INSTR_JMP_FUNCTION_BRVal+1)
#define INSTR_JMP_FUNCTION_BRValDEC (INSTR_JMP_FUNCTION_BRNVal+1)
#define INSTR_JMP_FUNCTION_BRNValDEC (INSTR_JMP_FUNCTION_BRValDEC+1)

#define INSTR_JMP_FUNCTION_NR_FUNCTIONS (INSTR_JMP_FUNCTION_BRNValDEC+1)
#define INSTR_JMP_FUNCTION_NR_BITS_unguarded ($clog2(INSTR_JMP_FUNCTION_NR_FUNCTIONS) +1)
#define INSTR_JMP_VALUE_NR_BITS_unguarded INSTR_VALUE_NR_BITS_unguarded-INSTR_JMP_FUNCTION_NR_BITS_unguarded

#define INSTR_JMP_FUNCTION_NR_BITS (INSTR_JMP_FUNCTION_NR_BITS_unguarded)
#define INSTR_JMP_VALUE_NR_BITS (INSTR_JMP_VALUE_NR_BITS_unguarded)

#define INSTR_JMP_VALUE_LOC_UPPER INSTR_JMP_VALUE_NR_BITS_unguarded-1
#define INSTR_JMP_VALUE_LOC_LOWER 0
#define INSTR_JMP_FUNCTION_LOC_UPPER INSTR_VALUE_NR_BITS_unguarded-1
#define INSTR_JMP_FUNCTION_LOC_LOWER INSTR_JMP_VALUE_NR_BITS_unguarded

#define INSTR_JMP_VALUE_LOC CONCAT_VALUES(INSTR_JMP_VALUE_LOC_UPPER,INSTR_JMP_VALUE_LOC_LOWER)
#define INSTR_JMP_FUNCTION_LOC CONCAT_VALUES(INSTR_JMP_FUNCTION_LOC_UPPER,INSTR_JMP_FUNCTION_LOC_LOWER)

// float instuction - steps in float calculations
/*
FLOAT(0): acc <= acc efOp  mantReg 								old:	FLOAT(5)
FLOAT(+1): acc(in 2's complement) <= {sgn, positiveInteger}				FLOAT(6)
FLOAT(+1): exponent <= exponent - (23 - PE(acc))/ exponent + 1			FLOAT(7)
FLOAT(+1): acc <= {sgn, exp, frac} 										FLOAT(8)
FLOAT(+1): acc <= {sgn, exponent, frac(acc)}							FLOAT(9)
FLOAT(+1): acc <= mantReg												FLOAT(10)
FLOAT(+1): exponent <= exponent - (23 - PE(acc))/ exponent + 1 			FLOAT(11)
//*/
#define INSTR_FLOAT_do_ACC_op_MANTREG (0)
#define INSTR_FLOAT_do_ACC_LOAD_W_SGN_INTEGER (INSTR_FLOAT_do_ACC_op_MANTREG+1)
#define INSTR_FLOAT_do_EXP_ADJUST (INSTR_FLOAT_do_ACC_LOAD_W_SGN_INTEGER+1)
#define INSTR_FLOAT_do_ACC_LOAD_SGN_EXP_FRAC (INSTR_FLOAT_do_EXP_ADJUST+1)
#define INSTR_FLOAT_do_ACC_LOAD_SGN_EXP_FRACACC (INSTR_FLOAT_do_ACC_LOAD_SGN_EXP_FRAC+1)
#define INSTR_FLOAT_do_ACC_LOAD_MANTREG (INSTR_FLOAT_do_ACC_LOAD_SGN_EXP_FRACACC+1)
#define INSTR_FLOAT_do_EXP_ADJUST_w_MEM_PRIOENC (INSTR_FLOAT_do_ACC_LOAD_MANTREG+1)

#define INSTR_FLOAT_NR_OPERATIONS (INSTR_FLOAT_do_EXP_ADJUST_w_MEM_PRIOENC+1)
#define INSTR_FLOAT_VALUE_NR_BITS ($clog2(INSTR_FLOAT_NR_OPERATIONS) +1)



////////////////////////////////////////////////////////////////////////////////////////////////// dsp related

#define DSP48E1_INTERNAL_SHIFTER_SIZE (17)

#define ARRAY_CELL_RALU_DSP_NR_BITS_unguarded 48
#define ARRAY_CELL_RALU_DSP_NR_BITS (ARRAY_CELL_RALU_DSP_NR_BITS_unguarded)

#define CTRL_RALU_DSP_NR_BITS_unguarded 48
#define CTRL_RALU_DSP_NR_BITS (CTRL_RALU_DSP_NR_BITS_unguarded)

#define ARRAY_CELL_RALU_DSP_A_in_NR_BITS 30
#define ARRAY_CELL_RALU_DSP_B_in_NR_BITS 18
#define ARRAY_CELL_RALU_DSP_C_in_NR_BITS 48
#define ARRAY_CELL_RALU_DSP_D_in_NR_BITS 25

#define CTRL_RALU_DSP_A_in_NR_BITS 30
#define CTRL_RALU_DSP_B_in_NR_BITS 18
#define CTRL_RALU_DSP_C_in_NR_BITS 48
#define CTRL_RALU_DSP_D_in_NR_BITS 25

////////////////////////////////////////////////////////////////////////////////////////////////// array alu command

#define ARRAY_ALUCOM_SRC_NR_BITS (1)
#define ARRAY_ALUCOM_ZSEL_NR_BITS (3)
#define ARRAY_ALUCOM_YSEL_NR_BITS (2)
#define ARRAY_ALUCOM_XSEL_NR_BITS (2)
#define ARRAY_ALUCOM_ALUFUNC_NR_BITS (4)
#define ARRAY_ALUCOM_CR_IN_NR_BITS (1)
#define ARRAY_OPMODE_NR_BITS (7)

#define ARRAY_ALUCOM_CR_IN_POS_UPPER ARRAY_ALUCOM_CR_IN_NR_BITS-1
#define ARRAY_ALUCOM_CR_IN_POS_LOWER 0
#define ARRAY_ALUCOM_ALUFUNC_POS_UPPER ARRAY_ALUCOM_CR_IN_NR_BITS+ARRAY_ALUCOM_ALUFUNC_NR_BITS-1
#define ARRAY_ALUCOM_ALUFUNC_POS_LOWER ARRAY_ALUCOM_CR_IN_NR_BITS
#define ARRAY_ALUCOM_XSEL_POS_UPPER ARRAY_ALUCOM_CR_IN_NR_BITS+ARRAY_ALUCOM_ALUFUNC_NR_BITS+ARRAY_ALUCOM_XSEL_NR_BITS-1
#define ARRAY_ALUCOM_XSEL_POS_LOWER ARRAY_ALUCOM_CR_IN_NR_BITS+ARRAY_ALUCOM_ALUFUNC_NR_BITS
#define ARRAY_ALUCOM_YSEL_POS_UPPER ARRAY_ALUCOM_CR_IN_NR_BITS+ARRAY_ALUCOM_ALUFUNC_NR_BITS+ARRAY_ALUCOM_XSEL_NR_BITS+ARRAY_ALUCOM_YSEL_NR_BITS-1
#define ARRAY_ALUCOM_YSEL_POS_LOWER ARRAY_ALUCOM_CR_IN_NR_BITS+ARRAY_ALUCOM_ALUFUNC_NR_BITS+ARRAY_ALUCOM_XSEL_NR_BITS
#define ARRAY_ALUCOM_ZSEL_POS_UPPER ARRAY_ALUCOM_CR_IN_NR_BITS+ARRAY_ALUCOM_ALUFUNC_NR_BITS+ARRAY_ALUCOM_XSEL_NR_BITS+ARRAY_ALUCOM_YSEL_NR_BITS+ARRAY_ALUCOM_ZSEL_NR_BITS-1
#define ARRAY_ALUCOM_ZSEL_POS_LOWER ARRAY_ALUCOM_CR_IN_NR_BITS+ARRAY_ALUCOM_ALUFUNC_NR_BITS+ARRAY_ALUCOM_XSEL_NR_BITS+ARRAY_ALUCOM_YSEL_NR_BITS
#define ARRAY_ALUCOM_SRC_POS_UPPER ARRAY_ALUCOM_CR_IN_NR_BITS+ARRAY_ALUCOM_ALUFUNC_NR_BITS+ARRAY_ALUCOM_XSEL_NR_BITS+ARRAY_ALUCOM_YSEL_NR_BITS+ARRAY_ALUCOM_ZSEL_NR_BITS+ARRAY_ALUCOM_SRC_NR_BITS-1
#define ARRAY_ALUCOM_SRC_POS_LOWER ARRAY_ALUCOM_CR_IN_NR_BITS+ARRAY_ALUCOM_ALUFUNC_NR_BITS+ARRAY_ALUCOM_XSEL_NR_BITS+ARRAY_ALUCOM_YSEL_NR_BITS+ARRAY_ALUCOM_ZSEL_NR_BITS
#define ARRAY_ALUCOM_OPMODE_POS_UPPER ARRAY_ALUCOM_XSEL_NR_BITS+ARRAY_ALUCOM_YSEL_NR_BITS+ARRAY_ALUCOM_ZSEL_NR_BITS+ARRAY_ALUCOM_CR_IN_NR_BITS+ARRAY_ALUCOM_ALUFUNC_NR_BITS-1
#define ARRAY_ALUCOM_OPMODE_POS_LOWER ARRAY_ALUCOM_CR_IN_NR_BITS+ARRAY_ALUCOM_ALUFUNC_NR_BITS

#define ARRAY_ALUCOM_CR_IN_POS CONCAT_VALUES(ARRAY_ALUCOM_CR_IN_POS_UPPER,ARRAY_ALUCOM_CR_IN_POS_LOWER)
#define ARRAY_ALUCOM_ALUFUNC_POS CONCAT_VALUES(ARRAY_ALUCOM_ALUFUNC_POS_UPPER,ARRAY_ALUCOM_ALUFUNC_POS_LOWER)
#define ARRAY_ALUCOM_XSEL_POS CONCAT_VALUES(ARRAY_ALUCOM_XSEL_POS_UPPER,ARRAY_ALUCOM_XSEL_POS_LOWER)
#define ARRAY_ALUCOM_YSEL_POS CONCAT_VALUES(ARRAY_ALUCOM_YSEL_POS_UPPER,ARRAY_ALUCOM_YSEL_POS_LOWER)
#define ARRAY_ALUCOM_ZSEL_POS CONCAT_VALUES(ARRAY_ALUCOM_ZSEL_POS_UPPER,ARRAY_ALUCOM_ZSEL_POS_LOWER)
#define ARRAY_ALUCOM_SRC_POS CONCAT_VALUES(ARRAY_ALUCOM_SRC_POS_UPPER,ARRAY_ALUCOM_SRC_POS_LOWER)
#define ARRAY_ALUCOM_OPMODE_POS CONCAT_VALUES(ARRAY_ALUCOM_OPMODE_POS_UPPER,ARRAY_ALUCOM_OPMODE_POS_LOWER)

#define ARRAY_ALUCOM_NR_BITS (ARRAY_ALUCOM_CR_IN_NR_BITS+ARRAY_ALUCOM_ALUFUNC_NR_BITS+ARRAY_ALUCOM_XSEL_NR_BITS+ARRAY_ALUCOM_YSEL_NR_BITS+ARRAY_ALUCOM_ZSEL_NR_BITS+ARRAY_ALUCOM_SRC_NR_BITS)

#define ARRAY_ALUCOM_SRC_OFF (1'b0)
#define ARRAY_ALUCOM_SRC_ON (1'b1)
// search, not source

#define ARRAY_ALUCOM_WSEL_out_0 (2'b00)
#define ARRAY_ALUCOM_WSEL_out_P (2'b01)
#define ARRAY_ALUCOM_WSEL_out_RND (2'b10)
#define ARRAY_ALUCOM_WSEL_out_C (2'b11)
// ^ rnd = rounding constant;
// use WSEL_out_0 for compatibility w/ DSP48E1

#define ARRAY_ALUCOM_ZSEL_out_0 (3'b000)
#define ARRAY_ALUCOM_ZSEL_out_PCIN (3'b001)
#define ARRAY_ALUCOM_ZSEL_out_P (3'b010)
#define ARRAY_ALUCOM_ZSEL_out_C (3'b011)
#define ARRAY_ALUCOM_ZSEL_out_P_macc_extend (3'b100)
#define ARRAY_ALUCOM_ZSEL_out_17bit_shift_PCIN (3'b101)
#define ARRAY_ALUCOM_ZSEL_out_17bit_shift_P (3'b110)
#define ARRAY_ALUCOM_ZSEL_out_ILLEGAL (3'b111)

#define ARRAY_ALUCOM_YSEL_out_0 (2'b00)
#define ARRAY_ALUCOM_YSEL_out_M_with_xsel (2'b01)
#define ARRAY_ALUCOM_YSEL_out_48bff (2'b10)
#define ARRAY_ALUCOM_YSEL_out_C (2'b11)

#define ARRAY_ALUCOM_XSEL_out_0 (2'b00)
#define ARRAY_ALUCOM_XSEL_out_M_with_ysel (2'b01)
#define ARRAY_ALUCOM_XSEL_out_P (2'b10)
#define ARRAY_ALUCOM_XSEL_out_AconcatB (2'b11)

// note that alu functions depend on opmode [3:2] (Y sel) check data sheet
#define ARRAY_ALUCOM_ALUFUNC_ZpYpXpCIN (4'b0000)
#define ARRAY_ALUCOM_ALUFUNC_ZmYmXmCIN (4'b0011)
#define ARRAY_ALUCOM_ALUFUNC_nZpXpYpCIN (4'b0001)
#define ARRAY_ALUCOM_ALUFUNC_mZmXmYmCINm1 (4'b0010)
//(Y sel) ( ==00 or ==10)

#define ARRAY_ALUCOM_ALUFUNC_X_xor_Z (4'b0100)
#define ARRAY_ALUCOM_ALUFUNC_X_nxor_Z (4'b0101)
#define ARRAY_ALUCOM_ALUFUNC_X_nxor_Z_1 (4'b0110)
#define ARRAY_ALUCOM_ALUFUNC_X_xor_Z_1 (4'b0111)
#define ARRAY_ALUCOM_ALUFUNC_X_and_Z (4'b1100)
#define ARRAY_ALUCOM_ALUFUNC_X_and_nZ (4'b1101)
#define ARRAY_ALUCOM_ALUFUNC_X_nand_Z (4'b1110)
#define ARRAY_ALUCOM_ALUFUNC_nX_or_Z (4'b1111)
#define ARRAY_ALUCOM_ALUFUNC_X_nxor_Z_2 (4'b0100)
#define ARRAY_ALUCOM_ALUFUNC_X_xor_Z_2 (4'b0101)
#define ARRAY_ALUCOM_ALUFUNC_X_xor_Z_3 (4'b0110)
#define ARRAY_ALUCOM_ALUFUNC_X_nxor_Z_3 (4'b0111)
#define ARRAY_ALUCOM_ALUFUNC_X_or_Z (4'b1100)
#define ARRAY_ALUCOM_ALUFUNC_X_or_nZ (4'b1101)
#define ARRAY_ALUCOM_ALUFUNC_X_nor_Z (4'b1110)
#define ARRAY_ALUCOM_ALUFUNC_nX_and_Z (4'b1111)

#define ARRAY_ALUCOM_CR_IN_ZERO (1'b0)
#define ARRAY_ALUCOM_CR_IN_ONE (1'b1)



////////////////////////////////////////////////////////////////////////////////////////////////// ctrl alu command

#define CTRL_ALUCOM_ZSEL_NR_BITS (3)
#define CTRL_ALUCOM_YSEL_NR_BITS (2)
#define CTRL_ALUCOM_XSEL_NR_BITS (2)
#define CTRL_ALUCOM_ALUFUNC_NR_BITS (4)
#define CTRL_ALUCOM_CR_IN_NR_BITS (1)
#define CTRL_OPMODE_NR_BITS (7)


#define CTRL_ALUCOM_CR_IN_POS_UPPER CTRL_ALUCOM_CR_IN_NR_BITS-1
#define CTRL_ALUCOM_CR_IN_POS_LOWER 0
#define CTRL_ALUCOM_ALUFUNC_POS_UPPER CTRL_ALUCOM_CR_IN_NR_BITS+CTRL_ALUCOM_ALUFUNC_NR_BITS-1
#define CTRL_ALUCOM_ALUFUNC_POS_LOWER CTRL_ALUCOM_CR_IN_NR_BITS
#define CTRL_ALUCOM_XSEL_POS_UPPER CTRL_ALUCOM_CR_IN_NR_BITS+CTRL_ALUCOM_ALUFUNC_NR_BITS+CTRL_ALUCOM_XSEL_NR_BITS-1
#define CTRL_ALUCOM_XSEL_POS_LOWER CTRL_ALUCOM_CR_IN_NR_BITS+CTRL_ALUCOM_ALUFUNC_NR_BITS
#define CTRL_ALUCOM_YSEL_POS_UPPER CTRL_ALUCOM_CR_IN_NR_BITS+CTRL_ALUCOM_ALUFUNC_NR_BITS+CTRL_ALUCOM_XSEL_NR_BITS+CTRL_ALUCOM_YSEL_NR_BITS-1
#define CTRL_ALUCOM_YSEL_POS_LOWER CTRL_ALUCOM_CR_IN_NR_BITS+CTRL_ALUCOM_ALUFUNC_NR_BITS+CTRL_ALUCOM_XSEL_NR_BITS
#define CTRL_ALUCOM_ZSEL_POS_UPPER CTRL_ALUCOM_CR_IN_NR_BITS+CTRL_ALUCOM_ALUFUNC_NR_BITS+CTRL_ALUCOM_XSEL_NR_BITS+CTRL_ALUCOM_YSEL_NR_BITS+CTRL_ALUCOM_ZSEL_NR_BITS-1
#define CTRL_ALUCOM_ZSEL_POS_LOWER CTRL_ALUCOM_CR_IN_NR_BITS+CTRL_ALUCOM_ALUFUNC_NR_BITS+CTRL_ALUCOM_XSEL_NR_BITS+CTRL_ALUCOM_YSEL_NR_BITS
#define CTRL_ALUCOM_OPMODE_POS_UPPER CTRL_ALUCOM_XSEL_NR_BITS+CTRL_ALUCOM_YSEL_NR_BITS+CTRL_ALUCOM_ZSEL_NR_BITS+CTRL_ALUCOM_CR_IN_NR_BITS+CTRL_ALUCOM_ALUFUNC_NR_BITS-1
#define CTRL_ALUCOM_OPMODE_POS_LOWER CTRL_ALUCOM_CR_IN_NR_BITS+CTRL_ALUCOM_ALUFUNC_NR_BITS

#define CTRL_ALUCOM_CR_IN_POS CONCAT_VALUES(CTRL_ALUCOM_CR_IN_POS_UPPER,CTRL_ALUCOM_CR_IN_POS_LOWER)
#define CTRL_ALUCOM_ALUFUNC_POS CONCAT_VALUES(CTRL_ALUCOM_ALUFUNC_POS_UPPER,CTRL_ALUCOM_ALUFUNC_POS_LOWER)
#define CTRL_ALUCOM_XSEL_POS CONCAT_VALUES(CTRL_ALUCOM_XSEL_POS_UPPER,CTRL_ALUCOM_XSEL_POS_LOWER)
#define CTRL_ALUCOM_YSEL_POS CONCAT_VALUES(CTRL_ALUCOM_YSEL_POS_UPPER,CTRL_ALUCOM_YSEL_POS_LOWER)
#define CTRL_ALUCOM_ZSEL_POS CONCAT_VALUES(CTRL_ALUCOM_ZSEL_POS_UPPER,CTRL_ALUCOM_ZSEL_POS_LOWER)
#define CTRL_ALUCOM_OPMODE_POS CONCAT_VALUES(CTRL_ALUCOM_OPMODE_POS_UPPER,CTRL_ALUCOM_OPMODE_POS_LOWER)

#define CTRL_ALUCOM_NR_BITS (CTRL_ALUCOM_CR_IN_NR_BITS+CTRL_ALUCOM_ALUFUNC_NR_BITS+CTRL_ALUCOM_XSEL_NR_BITS+CTRL_ALUCOM_YSEL_NR_BITS+CTRL_ALUCOM_ZSEL_NR_BITS)


#define CTRL_ALUCOM_ZSEL_out_0 (3'b000)
#define CTRL_ALUCOM_ZSEL_out_PCIN (3'b001)
#define CTRL_ALUCOM_ZSEL_out_P (3'b010)
#define CTRL_ALUCOM_ZSEL_out_C (3'b011)
#define CTRL_ALUCOM_ZSEL_out_P_macc_extend (3'b100)
#define CTRL_ALUCOM_ZSEL_out_17bit_shift_PCIN (3'b101)
#define CTRL_ALUCOM_ZSEL_out_17bit_shift_P (3'b110)
#define CTRL_ALUCOM_ZSEL_out_ILLEGAL (3'b111)

#define CTRL_ALUCOM_YSEL_out_0 (2'b00)
#define CTRL_ALUCOM_YSEL_out_M_with_xsel (2'b01)
#define CTRL_ALUCOM_YSEL_out_48bff (2'b10)
#define CTRL_ALUCOM_YSEL_out_C (2'b11)

#define CTRL_ALUCOM_XSEL_out_0 (2'b00)
#define CTRL_ALUCOM_XSEL_out_M_with_ysel (2'b01)
#define CTRL_ALUCOM_XSEL_out_P (2'b10)
#define CTRL_ALUCOM_XSEL_out_AconcatB (2'b11)

// note that alu functions depend on opmode [3:2] (Y sel) check data sheet
#define CTRL_ALUCOM_ALUFUNC_ZpYpXpCIN (4'b0000)
#define CTRL_ALUCOM_ALUFUNC_ZmYmXmCIN (4'b0011)
#define CTRL_ALUCOM_ALUFUNC_nZpXpYpCIN (4'b0001)
#define CTRL_ALUCOM_ALUFUNC_mZmXmYmCINm1 (4'b0010)
//(Y sel) ( ==00 or ==10)

#define CTRL_ALUCOM_ALUFUNC_X_xor_Z (4'b0100)
#define CTRL_ALUCOM_ALUFUNC_X_nxor_Z (4'b0101)
#define CTRL_ALUCOM_ALUFUNC_X_nxor_Z_1 (4'b0110)
#define CTRL_ALUCOM_ALUFUNC_X_xor_Z_1 (4'b0111)
#define CTRL_ALUCOM_ALUFUNC_X_and_Z (4'b1100)
#define CTRL_ALUCOM_ALUFUNC_X_and_nZ (4'b1101)
#define CTRL_ALUCOM_ALUFUNC_X_nand_Z (4'b1110)
#define CTRL_ALUCOM_ALUFUNC_nX_or_Z (4'b1111)
#define CTRL_ALUCOM_ALUFUNC_X_nxor_Z_2 (4'b0100)
#define CTRL_ALUCOM_ALUFUNC_X_xor_Z_2 (4'b0101)
#define CTRL_ALUCOM_ALUFUNC_X_xor_Z_3 (4'b0110)
#define CTRL_ALUCOM_ALUFUNC_X_nxor_Z_3 (4'b0111)
#define CTRL_ALUCOM_ALUFUNC_X_or_Z (4'b1100)
#define CTRL_ALUCOM_ALUFUNC_X_or_nZ (4'b1101)
#define CTRL_ALUCOM_ALUFUNC_X_nor_Z (4'b1110)
#define CTRL_ALUCOM_ALUFUNC_nX_and_Z (4'b1111)

#define CTRL_ALUCOM_CR_IN_ZERO (1'b0)
#define CTRL_ALUCOM_CR_IN_ONE (1'b1)



/////////////////////////////////////////////////////////////////////////////////////////// floating point

#define FLOAT_DATA_SIZE_NR_BITS (32)
#define FLOAT_SGN_NR_BITS (1)
#define FLOAT_EXPONENT_NR_BITS (8)
#define FLOAT_FRACTIONAL_NR_BITS (23)
#define FLOAT_MANTISSA_NR_BITS (FLOAT_FRACTIONAL_NR_BITS+1)

#define FLOAT_FRACTIONAL_LOC_UPPER FLOAT_FRACTIONAL_NR_BITS-1
#define FLOAT_FRACTIONAL_LOC_LOWER 0
#define FLOAT_EXPONENT_LOC_UPPER FLOAT_EXPONENT_NR_BITS+FLOAT_FRACTIONAL_NR_BITS-1
#define FLOAT_EXPONENT_LOC_LOWER FLOAT_FRACTIONAL_NR_BITS
#define FLOAT_SGN_LOC_UPPER FLOAT_SGN_NR_BITS+FLOAT_EXPONENT_NR_BITS+FLOAT_FRACTIONAL_NR_BITS-1
#define FLOAT_SGN_LOC_LOWER FLOAT_EXPONENT_NR_BITS+FLOAT_FRACTIONAL_NR_BITS

#define FLOAT_FRACTIONAL_LOC CONCAT_VALUES(FLOAT_FRACTIONAL_LOC_UPPER,FLOAT_FRACTIONAL_LOC_LOWER)
#define FLOAT_EXPONENT_LOC CONCAT_VALUES(FLOAT_EXPONENT_LOC_UPPER,FLOAT_EXPONENT_LOC_LOWER)
#define FLOAT_SGN_LOC CONCAT_VALUES(FLOAT_SGN_LOC_UPPER,FLOAT_SGN_LOC_LOWER)

#define FLOAT_EXPONENT_REG_NR_BITS (FLOAT_EXPONENT_NR_BITS + 1 + 1)

#define FLOAT_EXPONENT_REG_VALUE_LOC_UPPER FLOAT_EXPONENT_NR_BITS-1
#define FLOAT_EXPONENT_REG_VALUE_LOC_LOWER 0
#define FLOAT_EXPONENT_REG_OVERFLOW_DETECT_LOC_UPPER FLOAT_EXPONENT_NR_BITS+1-1
#define FLOAT_EXPONENT_REG_OVERFLOW_DETECT_LOC_LOWER FLOAT_EXPONENT_NR_BITS
#define FLOAT_EXPONENT_REG_UNDERFLOW_DETECT_LOC_UPPER FLOAT_EXPONENT_NR_BITS+1+1-1
#define FLOAT_EXPONENT_REG_UNDERFLOW_DETECT_LOC_LOWER FLOAT_EXPONENT_NR_BITS+1

#define FLOAT_EXPONENT_REG_VALUE_LOC CONCAT_VALUES(FLOAT_EXPONENT_REG_VALUE_LOC_UPPER,FLOAT_EXPONENT_REG_VALUE_LOC_LOWER)
#define FLOAT_EXPONENT_REG_OVERFLOW_DETECT_LOC CONCAT_VALUES(FLOAT_EXPONENT_REG_OVERFLOW_DETECT_LOC_UPPER,FLOAT_EXPONENT_REG_OVERFLOW_DETECT_LOC_LOWER)
#define FLOAT_EXPONENT_REG_UNDERFLOW_DETECT_LOC CONCAT_VALUES(FLOAT_EXPONENT_REG_UNDERFLOW_DETECT_LOC_UPPER,FLOAT_EXPONENT_REG_UNDERFLOW_DETECT_LOC_LOWER)

#define FLOAT_OPERATION_ADD (0)
#define FLOAT_OPERATION_SUB	(FLOAT_OPERATION_ADD+1)
#define FLOAT_OPERATION_MULT (FLOAT_OPERATION_SUB+1)
#define FLOAT_OPERATION_DIV (FLOAT_OPERATION_MULT+1)
#define FLOAT_OPERATIONS (FLOAT_OPERATION_DIV+1)
#define FLOAT_OPERATIONS_NR_BITS ($clog2(FLOAT_OPERATIONS) +1)

#define FLOAT_COMMAND_NOP (0)
#define FLOAT_COMMAND_ADD (FLOAT_COMMAND_NOP + 1)
#define FLOAT_COMMAND_SUB (FLOAT_COMMAND_ADD + 1)
#define FLOAT_COMMAND_MULT (FLOAT_COMMAND_SUB + 1)
#define FLOAT_COMMAND_DIV (FLOAT_COMMAND_MULT + 1)
#define FLOAT_COMMAND_ADD_SGN (FLOAT_COMMAND_DIV + 1)
#define FLOAT_COMMAND_EXP_ADJUST (FLOAT_COMMAND_ADD_SGN + 1)
#define FLOAT_COMMAND_COMP_RES (FLOAT_COMMAND_EXP_ADJUST + 1)
#define FLOAT_COMMAND_MULT_EXP (FLOAT_COMMAND_COMP_RES + 1)
#define FLOAT_COMMAND_FIRST_MULT (FLOAT_COMMAND_MULT_EXP + 1)
#define FLOAT_COMMAND_SECOND_MULT (FLOAT_COMMAND_FIRST_MULT + 1)
#define FLOAT_COMMAND_DIV_LOOP1 (FLOAT_COMMAND_SECOND_MULT + 1)
#define FLOAT_COMMAND_DIV_LOOP2 (FLOAT_COMMAND_DIV_LOOP1 + 1)
#define FLOAT_COMMAND_ACC_LOAD_MANT_REG (FLOAT_COMMAND_DIV_LOOP2+1)
#define FLOAT_COMMAND_do_ACC_op_MANTREG (FLOAT_COMMAND_ACC_LOAD_MANT_REG+1)
#define FLOAT_COMMAND_do_EXP_ADJUST_w_MEM_PRIOENC (FLOAT_COMMAND_do_ACC_op_MANTREG+1)

#define FLOAT_COMMAND_NR_BITS ($clog2(FLOAT_COMMAND_do_EXP_ADJUST_w_MEM_PRIOENC+1) +1)

#define FLOAT_ARRAY_MANTISSA_SHIFT_AMOUNT_SIZE ($clog2(DATA_SIZE))
#define FLOAT_CTRL_MANTISSA_SHIFT_AMOUNT_SIZE ($clog2(DATA_SIZE_C))

#define FLOAT_EFFECTIVE_OPERATION_SIZE_unguarded 3
#define FLOAT_EFFECTIVE_OPERATION_SIZE (FLOAT_EFFECTIVE_OPERATION_SIZE_unguarded)
#define FLOAT_EFFECTIVE_OPERATION_DSP_carry_in_SIZE (1)
#define FLOAT_EFFECTIVE_OPERATION_DSP_carry_in_LOC_UPPER FLOAT_EFFECTIVE_OPERATION_DSP_carry_in_SIZE-1
#define FLOAT_EFFECTIVE_OPERATION_DSP_carry_in_LOC_LOWER 0
#define FLOAT_EFFECTIVE_OPERATION_DSP_carry_in_LOC CONCAT_VALUES(FLOAT_EFFECTIVE_OPERATION_DSP_carry_in_LOC_UPPER,FLOAT_EFFECTIVE_OPERATION_DSP_carry_in_LOC_LOWER)
#define FLOAT_EFFECTIVE_OPERATION_alucom_SIZE (2)
#define FLOAT_EFFECTIVE_OPERATION_alucom_LOC_UPPER FLOAT_EFFECTIVE_OPERATION_alucom_SIZE+FLOAT_EFFECTIVE_OPERATION_DSP_carry_in_SIZE-1
#define FLOAT_EFFECTIVE_OPERATION_alucom_LOC_LOWER FLOAT_EFFECTIVE_OPERATION_DSP_carry_in_SIZE
#define FLOAT_EFFECTIVE_OPERATION_alucom_LOC FLOAT_EFFECTIVE_OPERATION_alucom_LOC_UPPER##FLOAT_EFFECTIVE_OPERATION_alucom_LOC_LOWER

#define FLOAT_EFFECTIVE_OPERATION_ADD(x,delimiter) "x##delimiter##d0" // x = FLOAT_EFFECTIVE_OPERATION_SIZE_unguarded
#define FLOAT_EFFECTIVE_OPERATION_SUB(x,delimiter) "x##delimiter##d6" // x = FLOAT_EFFECTIVE_OPERATION_SIZE_unguarded
#define FLOAT_EFFECTIVE_OPERATION_RSUB(x,delimiter) "x##delimiter##d3" // x = FLOAT_EFFECTIVE_OPERATION_SIZE_unguarded
// values taken from alucom; comprised of alucom and carryin

#define FLOAT_FLOAT_ALUCOM_SIZE (FLOAT_EFFECTIVE_OPERATION_alucom_SIZE)
#define FLOAT_ALLIGN_SIZE (5)

#define FLOAT_SGN_PLUS 1'b0
#define FLOAT_SGN_MINUS 1'b1

#define INSTR_FLOAT_FP_COMMAND_VALUE_LOC_UPPER FLOAT_COMMAND_NR_BITS-1
#define INSTR_FLOAT_FP_COMMAND_VALUE_LOC_LOWER 0
#define INSTR_FLOAT_FP_COMMAND_VALUE_LOC CONCAT_VALUES(INSTR_FLOAT_FP_COMMAND_VALUE_LOC_UPPER,INSTR_FLOAT_FP_COMMAND_VALUE_LOC_LOWER)

#ifdef RESOURCE_ARRAY_CELL_HAS_FLOATING_POINT
#ifndef RESOURCE_ARRAY_CELL_HAS_ROTATE
#define RESOURCE_ARRAY_CELL_HAS_ROTATE (1)
#endif
#ifndef RESOURCE_ARRAY_CELL_HAS_SHIFT
#define RESOURCE_ARRAY_CELL_HAS_SHIFT (1)
#endif
#endif


#define FLOAT_FIRST_MULT_NR_BITS (DSP48E1_INTERNAL_SHIFTER_SIZE)
#define FLOAT_SECOND_MULT_NR_BITS (FLOAT_FRACTIONAL_NR_BITS-FLOAT_FIRST_MULT_NR_BITS)


///////////////////////////////////////////////////////////////////////////////////// local shift register

#ifdef RESOURCE_ARRAY_CELL_HAS_SHIFT
#ifndef RESOURCE_ARRAY_CELL_HAS_ROTATE
#define RESOURCE_ARRAY_CELL_HAS_ROTATE (1)
#endif
#endif



#define ARRAY_LOCAL_SHIFT_REG_BAR_DEFINITION (2)


///////////////////////////////////////////////////////////////////////////////////// global shift register

#define ARRAY_GLOBAL_SR_CMD_NOP (0)
#define ARRAY_GLOBAL_SR_CMD_MOVE_RIGHT_WO_BOOL (ARRAY_GLOBAL_SR_CMD_NOP+1)
#define ARRAY_GLOBAL_SR_CMD_MOVE_LEFT_WO_BOOL (ARRAY_GLOBAL_SR_CMD_MOVE_RIGHT_WO_BOOL+1)
#define ARRAY_GLOBAL_SR_CMD_MOVE_RIGHT_W_BOOL_ZERO (ARRAY_GLOBAL_SR_CMD_MOVE_LEFT_WO_BOOL+1)
#define ARRAY_GLOBAL_SR_CMD_MOVE_LEFT_W_BOOL_ZERO (ARRAY_GLOBAL_SR_CMD_MOVE_RIGHT_W_BOOL_ZERO+1)
#define ARRAY_GLOBAL_SR_CMD_MOVE_RIGHT_W_BOOL_HOLD (ARRAY_GLOBAL_SR_CMD_MOVE_LEFT_W_BOOL_ZERO+1)
#define ARRAY_GLOBAL_SR_CMD_MOVE_LEFT_W_BOOL_HOLD (ARRAY_GLOBAL_SR_CMD_MOVE_RIGHT_W_BOOL_HOLD+1)
#define ARRAY_GLOBAL_SR_CMD_SRSTORE (ARRAY_GLOBAL_SR_CMD_MOVE_LEFT_W_BOOL_HOLD+1)
// ^ WO bool doesnt care about bool value, W/ bool cares
#define ARRAY_GLOBAL_SR_CMD_NR_FUNCTIONS (ARRAY_GLOBAL_SR_CMD_SRSTORE+1)
#define ARRAY_GLOBAL_SR_CMD_NR_BITS ($clog2(ARRAY_GLOBAL_SR_CMD_NR_FUNCTIONS) +1)

#define ARRAY_GLOBAL_SR_RIGHT_CELL_SEL_DONT_CARE 0
#define ARRAY_GLOBAL_SR_RIGHT_CELL_SEL_ROTATE (0)
#define ARRAY_GLOBAL_SR_RIGHT_CELL_SEL_INSERT_from_CTRL (ARRAY_GLOBAL_SR_RIGHT_CELL_SEL_ROTATE+1)
#define ARRAY_GLOBAL_SR_RIGHT_CELL_SEL_INSERT_REDUCTION_out (ARRAY_GLOBAL_SR_RIGHT_CELL_SEL_INSERT_from_CTRL+1)
#define ARRAY_GLOBAL_SR_RIGHT_CELL_SEL_ZERO (ARRAY_GLOBAL_SR_RIGHT_CELL_SEL_INSERT_REDUCTION_out+1)
#define ARRAY_GLOBAL_SR_LEFT_CELL_SEL_DONT_CARE 0
#define ARRAY_GLOBAL_SR_LEFT_CELL_SEL_ROTATE (0)
#define ARRAY_GLOBAL_SR_LEFT_CELL_SEL_INSERT_from_CTRL (ARRAY_GLOBAL_SR_LEFT_CELL_SEL_ROTATE+1)
#define ARRAY_GLOBAL_SR_LEFT_CELL_SEL_INSERT_REDUCTION_out (ARRAY_GLOBAL_SR_LEFT_CELL_SEL_INSERT_from_CTRL+1)
#define ARRAY_GLOBAL_SR_LEFT_CELL_SEL_ZERO (ARRAY_GLOBAL_SR_LEFT_CELL_SEL_INSERT_REDUCTION_out+1)
// ^ used for the loose inputs at the leftmost and rightmost cells in the array

#define ARRAY_GLOBAL_SR_RIGHT_CELL_SEL_NR_FUNCTIONS (ARRAY_GLOBAL_SR_RIGHT_CELL_SEL_ZERO+1)
#define ARRAY_GLOBAL_SR_RIGHT_CELL_SEL_NR_BITS ($clog2(ARRAY_GLOBAL_SR_RIGHT_CELL_SEL_NR_FUNCTIONS) +1)
#define ARRAY_GLOBAL_SR_LEFT_CELL_SEL_NR_FUNCTIONS (ARRAY_GLOBAL_SR_LEFT_CELL_SEL_ZERO+1)
#define ARRAY_GLOBAL_SR_LEFT_CELL_SEL_NR_BITS ($clog2(ARRAY_GLOBAL_SR_LEFT_CELL_SEL_NR_FUNCTIONS) +1)


/////////////////////////////////////////////////////////////////////////////////////   controller - misc - clock cycle counter

#define CTRL_CLOCK_CYCLE_COUNTER_NR_BITS (IO_INTF_PROG_AXILITE_DATA_SIZE)
#define CTRL_CLOCK_CYCLE_COUNTER_STATE_STOP (0)
#define CTRL_CLOCK_CYCLE_COUNTER_STATE_RUN_W_HALT (CTRL_CLOCK_CYCLE_COUNTER_STATE_STOP+1)
#define CTRL_CLOCK_CYCLE_COUNTER_STATE_RUN_WO_HALT (CTRL_CLOCK_CYCLE_COUNTER_STATE_RUN_W_HALT+1)

#define CTRL_CLOCK_CYCLE_COUNTER_STATE_NR_FUNCTIONS (CTRL_CLOCK_CYCLE_COUNTER_STATE_RUN_WO_HALT+1)
#define CTRL_CLOCK_CYCLE_COUNTER_STATE_NR_BITS ($clog2(CTRL_CLOCK_CYCLE_COUNTER_STATE_NR_FUNCTIONS)+1)

/////////////////////////////////////////////////////////////////////////////////////   bw net cell generation - do not edit below this point

// resource management: (adder + sub) + bitwise_block
#ifdef RESOURCE_NET_HAS_OPERATION_ADD
#ifndef RESOURCE_NET_NEEDS_ADD
#define RESOURCE_NET_NEEDS_ADD (1)
#endif
#endif

#ifdef RESOURCE_NET_HAS_OPERATION_SUM_PREFIX
#ifndef RESOURCE_NET_NEEDS_ADD
#define RESOURCE_NET_NEEDS_ADD (1)
#endif
#endif

#ifdef RESOURCE_NET_HAS_OPERATION_SUB
#ifndef RESOURCE_NET_NEEDS_SUB
#define RESOURCE_NET_NEEDS_SUB (1)
#endif
#endif

#ifdef RESOURCE_NET_HAS_OPERATION_MIN
#ifndef RESOURCE_NET_NEEDS_SUB
#define RESOURCE_NET_NEEDS_SUB (1)
#endif
#endif

#ifdef RESOURCE_NET_HAS_OPERATION_MAX
#ifndef RESOURCE_NET_NEEDS_SUB
#define RESOURCE_NET_NEEDS_SUB (1)
#endif
#endif

#ifdef RESOURCE_NET_NEEDS_ADD
#ifndef RESOURCE_NET_HAS_ADDER
#define RESOURCE_NET_HAS_ADDER (1)
#endif
#endif

#ifdef RESOURCE_NET_NEEDS_SUB
#ifndef RESOURCE_NET_HAS_ADDER
#define RESOURCE_NET_HAS_ADDER (1)
#endif
#endif

#ifdef RESOURCE_NET_HAS_OPERATION_bitwise_OPERATIONS
#define NET_HAS_OPERATION_bitwise_OPERATIONS (1)
#else
#define NET_HAS_OPERATION_bitwise_OPERATIONS (0)
#endif

// possible mux inputs - in each cell - per type - per mux
#ifdef RESOURCE_NET_HAS_OPERATION_ADD
#ifndef NET_CELL_TYPE_1_NEED_MUX1_INPUT_ADDER
#define NET_CELL_TYPE_1_NEED_MUX1_INPUT_ADDER (1)
#endif
#ifndef NET_CELL_TYPE_2_NEED_MUX1_INPUT_ADDER
#define NET_CELL_TYPE_2_NEED_MUX1_INPUT_ADDER (1)
#endif
#endif

#ifdef RESOURCE_NET_HAS_OPERATION_SUB
#ifndef NET_CELL_TYPE_1_NEED_MUX1_INPUT_ADDER
#define NET_CELL_TYPE_1_NEED_MUX1_INPUT_ADDER (1)
#endif
#ifndef NET_CELL_TYPE_2_NEED_MUX1_INPUT_ADDER
#define NET_CELL_TYPE_2_NEED_MUX1_INPUT_ADDER (1)
#endif
#endif

#ifdef RESOURCE_NET_HAS_OPERATION_MIN
#ifndef NET_CELL_TYPE_1_NEED_MUX1_INPUT_0
#define NET_CELL_TYPE_1_NEED_MUX1_INPUT_0 (1)
#endif
#ifndef NET_CELL_TYPE_1_NEED_MUX1_INPUT_1
#define NET_CELL_TYPE_1_NEED_MUX1_INPUT_1 (1)
#endif
#ifndef NET_CELL_TYPE_2_NEED_MUX1_INPUT_0
#define NET_CELL_TYPE_2_NEED_MUX1_INPUT_0 (1)
#endif
#ifndef NET_CELL_TYPE_2_NEED_MUX1_INPUT_1
#define NET_CELL_TYPE_2_NEED_MUX1_INPUT_1 (1)
#endif
#endif

#ifdef RESOURCE_NET_HAS_OPERATION_MAX
#ifndef NET_CELL_TYPE_1_NEED_MUX1_INPUT_0
#define NET_CELL_TYPE_1_NEED_MUX1_INPUT_0 (1)
#endif
#ifndef NET_CELL_TYPE_1_NEED_MUX1_INPUT_1
#define NET_CELL_TYPE_1_NEED_MUX1_INPUT_1 (1)
#endif
#ifndef NET_CELL_TYPE_2_NEED_MUX1_INPUT_0
#define NET_CELL_TYPE_2_NEED_MUX1_INPUT_0 (1)
#endif
#ifndef NET_CELL_TYPE_2_NEED_MUX1_INPUT_1
#define NET_CELL_TYPE_2_NEED_MUX1_INPUT_1 (1)
#endif
#endif

#ifdef RESOURCE_NET_HAS_OPERATION_SPLIT
#ifndef NET_CELL_TYPE_0_NEED_MUX0_INPUT_0
#define NET_CELL_TYPE_0_NEED_MUX0_INPUT_0 (1)
#endif
#ifndef NET_CELL_TYPE_0_NEED_MUX1_INPUT_0
#define NET_CELL_TYPE_0_NEED_MUX1_INPUT_0 (1)
#endif
#ifndef NET_CELL_TYPE_0_NEED_MUX0_INPUT_1
#define NET_CELL_TYPE_0_NEED_MUX0_INPUT_1 (1)
#endif
#ifndef NET_CELL_TYPE_0_NEED_MUX1_INPUT_1
#define NET_CELL_TYPE_0_NEED_MUX1_INPUT_1 (1)
#endif
#ifndef NET_CELL_TYPE_1_NEED_MUX0_INPUT_0
#define NET_CELL_TYPE_1_NEED_MUX0_INPUT_0 (1)
#endif
#ifndef NET_CELL_TYPE_1_NEED_MUX1_INPUT_0
#define NET_CELL_TYPE_1_NEED_MUX1_INPUT_0 (1)
#endif
#ifndef NET_CELL_TYPE_1_NEED_MUX0_INPUT_1
#define NET_CELL_TYPE_1_NEED_MUX0_INPUT_1 (1)
#endif
#ifndef NET_CELL_TYPE_1_NEED_MUX1_INPUT_1
#define NET_CELL_TYPE_1_NEED_MUX1_INPUT_1 (1)
#endif
#ifndef NET_CELL_TYPE_2_NEED_MUX0_INPUT_0
#define NET_CELL_TYPE_2_NEED_MUX0_INPUT_0 (1)
#endif
#ifndef NET_CELL_TYPE_2_NEED_MUX1_INPUT_0
#define NET_CELL_TYPE_2_NEED_MUX1_INPUT_0 (1)
#endif
#ifndef NET_CELL_TYPE_2_NEED_MUX0_INPUT_1
#define NET_CELL_TYPE_2_NEED_MUX0_INPUT_1 (1)
#endif
#ifndef NET_CELL_TYPE_2_NEED_MUX1_INPUT_1
#define NET_CELL_TYPE_2_NEED_MUX1_INPUT_1 (1)
#endif
#ifndef NET_CELL_TYPE_3_NEED_MUX0_INPUT_0
#define NET_CELL_TYPE_3_NEED_MUX0_INPUT_0 (1)
#endif
#ifndef NET_CELL_TYPE_3_NEED_MUX1_INPUT_0
#define NET_CELL_TYPE_3_NEED_MUX1_INPUT_0 (1)
#endif
#ifndef NET_CELL_TYPE_3_NEED_MUX0_INPUT_1
#define NET_CELL_TYPE_3_NEED_MUX0_INPUT_1 (1)
#endif
#ifndef NET_CELL_TYPE_3_NEED_MUX1_INPUT_1
#define NET_CELL_TYPE_3_NEED_MUX1_INPUT_1 (1)
#endif
#endif

#ifdef RESOURCE_NET_HAS_OPERATION_PERMUTE
#ifndef NET_CELL_TYPE_0_NEED_MUX0_INPUT_0
#define NET_CELL_TYPE_0_NEED_MUX0_INPUT_0 (1)
#endif
#ifndef NET_CELL_TYPE_0_NEED_MUX1_INPUT_0
#define NET_CELL_TYPE_0_NEED_MUX1_INPUT_0 (1)
#endif
#ifndef NET_CELL_TYPE_0_NEED_MUX0_INPUT_1
#define NET_CELL_TYPE_0_NEED_MUX0_INPUT_1 (1)
#endif
#ifndef NET_CELL_TYPE_0_NEED_MUX1_INPUT_1
#define NET_CELL_TYPE_0_NEED_MUX1_INPUT_1 (1)
#endif
#ifndef NET_CELL_TYPE_1_NEED_MUX0_INPUT_0
#define NET_CELL_TYPE_1_NEED_MUX0_INPUT_0 (1)
#endif
#ifndef NET_CELL_TYPE_1_NEED_MUX1_INPUT_0
#define NET_CELL_TYPE_1_NEED_MUX1_INPUT_0 (1)
#endif
#ifndef NET_CELL_TYPE_1_NEED_MUX0_INPUT_1
#define NET_CELL_TYPE_1_NEED_MUX0_INPUT_1 (1)
#endif
#ifndef NET_CELL_TYPE_1_NEED_MUX1_INPUT_1
#define NET_CELL_TYPE_1_NEED_MUX1_INPUT_1 (1)
#endif
#ifndef NET_CELL_TYPE_2_NEED_MUX0_INPUT_0
#define NET_CELL_TYPE_2_NEED_MUX0_INPUT_0 (1)
#endif
#ifndef NET_CELL_TYPE_2_NEED_MUX1_INPUT_0
#define NET_CELL_TYPE_2_NEED_MUX1_INPUT_0 (1)
#endif
#ifndef NET_CELL_TYPE_2_NEED_MUX0_INPUT_1
#define NET_CELL_TYPE_2_NEED_MUX0_INPUT_1 (1)
#endif
#ifndef NET_CELL_TYPE_2_NEED_MUX1_INPUT_1
#define NET_CELL_TYPE_2_NEED_MUX1_INPUT_1 (1)
#endif
#ifndef NET_CELL_TYPE_3_NEED_MUX0_INPUT_0
#define NET_CELL_TYPE_3_NEED_MUX0_INPUT_0 (1)
#endif
#ifndef NET_CELL_TYPE_3_NEED_MUX1_INPUT_0
#define NET_CELL_TYPE_3_NEED_MUX1_INPUT_0 (1)
#endif
#ifndef NET_CELL_TYPE_3_NEED_MUX0_INPUT_1
#define NET_CELL_TYPE_3_NEED_MUX0_INPUT_1 (1)
#endif
#ifndef NET_CELL_TYPE_3_NEED_MUX1_INPUT_1
#define NET_CELL_TYPE_3_NEED_MUX1_INPUT_1 (1)
#endif
#ifndef NET_CELL_TYPE_4_NEED_MUX0_INPUT_0
#define NET_CELL_TYPE_4_NEED_MUX0_INPUT_0 (1)
#endif
#ifndef NET_CELL_TYPE_4_NEED_MUX1_INPUT_0
#define NET_CELL_TYPE_4_NEED_MUX1_INPUT_0 (1)
#endif
#ifndef NET_CELL_TYPE_4_NEED_MUX0_INPUT_1
#define NET_CELL_TYPE_4_NEED_MUX0_INPUT_1 (1)
#endif
#ifndef NET_CELL_TYPE_4_NEED_MUX1_INPUT_1
#define NET_CELL_TYPE_4_NEED_MUX1_INPUT_1 (1)
#endif
#endif

#ifdef RESOURCE_NET_HAS_OPERATION_SUM_PREFIX
#ifndef NET_CELL_TYPE_0_NEED_MUX0_INPUT_0
#define NET_CELL_TYPE_0_NEED_MUX0_INPUT_0 (1)
#endif
#ifndef NET_CELL_TYPE_0_NEED_MUX1_INPUT_1
#define NET_CELL_TYPE_0_NEED_MUX1_INPUT_1 (1)
#endif
#ifndef NET_CELL_TYPE_1_NEED_MUX0_INPUT_0
#define NET_CELL_TYPE_1_NEED_MUX0_INPUT_0 (1)
#endif
#ifndef NET_CELL_TYPE_1_NEED_MUX1_INPUT_ADDER
#define NET_CELL_TYPE_1_NEED_MUX1_INPUT_ADDER (1)
#endif
#ifndef NET_CELL_TYPE_2_NEED_MUX0_INPUT_1
#define NET_CELL_TYPE_2_NEED_MUX0_INPUT_1 (1)
#endif
#ifndef NET_CELL_TYPE_2_NEED_MUX1_INPUT_ADDER
#define NET_CELL_TYPE_2_NEED_MUX1_INPUT_ADDER (1)
#endif
#ifndef NET_CELL_TYPE_3_NEED_MUX0_INPUT_ADDER
#define NET_CELL_TYPE_3_NEED_MUX0_INPUT_ADDER (1)
#endif
#ifndef NET_CELL_TYPE_3_NEED_MUX1_INPUT_1
#define NET_CELL_TYPE_3_NEED_MUX1_INPUT_1 (1)
#endif
#endif

#ifdef RESOURCE_NET_HAS_OPERATION_bitwise_AND
#ifndef NET_CELL_TYPE_1_NEED_MUX1_INPUT_BITWISE
#define NET_CELL_TYPE_1_NEED_MUX1_INPUT_BITWISE (1)
#endif
#ifndef NET_CELL_TYPE_2_NEED_MUX1_INPUT_BITWISE
#define NET_CELL_TYPE_2_NEED_MUX1_INPUT_BITWISE (1)
#endif
#endif

#ifdef RESOURCE_NET_HAS_OPERATION_bitwise_OR
#ifndef NET_CELL_TYPE_1_NEED_MUX1_INPUT_BITWISE
#define NET_CELL_TYPE_1_NEED_MUX1_INPUT_BITWISE (1)
#endif
#ifndef NET_CELL_TYPE_2_NEED_MUX1_INPUT_BITWISE
#define NET_CELL_TYPE_2_NEED_MUX1_INPUT_BITWISE (1)
#endif
#endif

#ifdef RESOURCE_NET_HAS_OPERATION_bitwise_XOR
#ifndef NET_CELL_TYPE_1_NEED_MUX1_INPUT_BITWISE
#define NET_CELL_TYPE_1_NEED_MUX1_INPUT_BITWISE (1)
#endif
#ifndef NET_CELL_TYPE_2_NEED_MUX1_INPUT_BITWISE
#define NET_CELL_TYPE_2_NEED_MUX1_INPUT_BITWISE (1)
#endif
#endif

#ifdef RESOURCE_NET_HAS_OPERATION_bitwise_XOR_PREFIX
#ifndef NET_CELL_TYPE_0_NEED_MUX0_INPUT_0
#define NET_CELL_TYPE_0_NEED_MUX0_INPUT_0 (1)
#endif
#ifndef NET_CELL_TYPE_0_NEED_MUX1_INPUT_1
#define NET_CELL_TYPE_0_NEED_MUX1_INPUT_1 (1)
#endif
#ifndef NET_CELL_TYPE_1_NEED_MUX0_INPUT_0
#define NET_CELL_TYPE_1_NEED_MUX0_INPUT_0 (1)
#endif
#ifndef NET_CELL_TYPE_1_NEED_MUX1_INPUT_BITWISE
#define NET_CELL_TYPE_1_NEED_MUX1_INPUT_BITWISE (1)
#endif
#ifndef NET_CELL_TYPE_2_NEED_MUX0_INPUT_1
#define NET_CELL_TYPE_2_NEED_MUX0_INPUT_1 (1)
#endif
#ifndef NET_CELL_TYPE_2_NEED_MUX1_INPUT_BITWISE
#define NET_CELL_TYPE_2_NEED_MUX1_INPUT_BITWISE (1)
#endif
#ifndef NET_CELL_TYPE_3_NEED_MUX0_INPUT_BITWISE
#define NET_CELL_TYPE_3_NEED_MUX0_INPUT_BITWISE (1)
#endif
#ifndef NET_CELL_TYPE_3_NEED_MUX1_INPUT_1
#define NET_CELL_TYPE_3_NEED_MUX1_INPUT_1 (1)
#endif
#endif

// defined all for adding (for nr_mux_inputs)
#ifndef NET_CELL_TYPE_0_NEED_MUX0_INPUT_0
#define NET_CELL_TYPE_0_NEED_MUX0_INPUT_0 (0)
#else
#define NET_CELL_TYPE_0_NEED_MUX0_INPUT_0_no_value (1)
#endif

#ifndef NET_CELL_TYPE_0_NEED_MUX1_INPUT_0
#define NET_CELL_TYPE_0_NEED_MUX1_INPUT_0 (0)
#else
#define NET_CELL_TYPE_0_NEED_MUX1_INPUT_0_no_value (1)
#endif

#ifndef NET_CELL_TYPE_1_NEED_MUX0_INPUT_0
#define NET_CELL_TYPE_1_NEED_MUX0_INPUT_0 (0)
#else
#define NET_CELL_TYPE_1_NEED_MUX0_INPUT_0_no_value (1)
#endif

#ifndef NET_CELL_TYPE_1_NEED_MUX1_INPUT_0
#define NET_CELL_TYPE_1_NEED_MUX1_INPUT_0 (0)
#else
#define NET_CELL_TYPE_1_NEED_MUX1_INPUT_0_no_value (1)
#endif

#ifndef NET_CELL_TYPE_2_NEED_MUX0_INPUT_0
#define NET_CELL_TYPE_2_NEED_MUX0_INPUT_0 (0)
#else
#define NET_CELL_TYPE_2_NEED_MUX0_INPUT_0_no_value (1)
#endif

#ifndef NET_CELL_TYPE_2_NEED_MUX1_INPUT_0
#define NET_CELL_TYPE_2_NEED_MUX1_INPUT_0 (0)
#else
#define NET_CELL_TYPE_2_NEED_MUX1_INPUT_0_no_value (1)
#endif

#ifndef NET_CELL_TYPE_3_NEED_MUX0_INPUT_0
#define NET_CELL_TYPE_3_NEED_MUX0_INPUT_0 (0)
#else
#define NET_CELL_TYPE_3_NEED_MUX0_INPUT_0_no_value (1)
#endif

#ifndef NET_CELL_TYPE_3_NEED_MUX1_INPUT_0
#define NET_CELL_TYPE_3_NEED_MUX1_INPUT_0 (0)
#else
#define NET_CELL_TYPE_3_NEED_MUX1_INPUT_0_no_value (1)
#endif

#ifndef NET_CELL_TYPE_4_NEED_MUX0_INPUT_0
#define NET_CELL_TYPE_4_NEED_MUX0_INPUT_0 (0)
#else
#define NET_CELL_TYPE_4_NEED_MUX0_INPUT_0_no_value (1)
#endif

#ifndef NET_CELL_TYPE_4_NEED_MUX1_INPUT_0
#define NET_CELL_TYPE_4_NEED_MUX1_INPUT_0 (0)
#else
#define NET_CELL_TYPE_4_NEED_MUX1_INPUT_0_no_value (1)
#endif

#ifndef NET_CELL_TYPE_0_NEED_MUX0_INPUT_1
#define NET_CELL_TYPE_0_NEED_MUX0_INPUT_1 (0)
#else
#define NET_CELL_TYPE_0_NEED_MUX0_INPUT_1_no_value (1)
#endif

#ifndef NET_CELL_TYPE_0_NEED_MUX1_INPUT_1
#define NET_CELL_TYPE_0_NEED_MUX1_INPUT_1 (0)
#else
#define NET_CELL_TYPE_0_NEED_MUX1_INPUT_1_no_value (1)
#endif

#ifndef NET_CELL_TYPE_1_NEED_MUX0_INPUT_1
#define NET_CELL_TYPE_1_NEED_MUX0_INPUT_1 (0)
#else
#define NET_CELL_TYPE_1_NEED_MUX0_INPUT_1_no_value (1)
#endif

#ifndef NET_CELL_TYPE_1_NEED_MUX1_INPUT_1
#define NET_CELL_TYPE_1_NEED_MUX1_INPUT_1 (0)
#else
#define NET_CELL_TYPE_1_NEED_MUX1_INPUT_1_no_value (1)
#endif

#ifndef NET_CELL_TYPE_2_NEED_MUX0_INPUT_1
#define NET_CELL_TYPE_2_NEED_MUX0_INPUT_1 (0)
#else
#define NET_CELL_TYPE_2_NEED_MUX0_INPUT_1_no_value (1)
#endif

#ifndef NET_CELL_TYPE_2_NEED_MUX1_INPUT_1
#define NET_CELL_TYPE_2_NEED_MUX1_INPUT_1 (0)
#else
#define NET_CELL_TYPE_2_NEED_MUX1_INPUT_1_no_value (1)
#endif

#ifndef NET_CELL_TYPE_3_NEED_MUX0_INPUT_1
#define NET_CELL_TYPE_3_NEED_MUX0_INPUT_1 (0)
#else
#define NET_CELL_TYPE_3_NEED_MUX0_INPUT_1_no_value (1)
#endif

#ifndef NET_CELL_TYPE_3_NEED_MUX1_INPUT_1
#define NET_CELL_TYPE_3_NEED_MUX1_INPUT_1 (0)
#else
#define NET_CELL_TYPE_3_NEED_MUX1_INPUT_1_no_value (1)
#endif

#ifndef NET_CELL_TYPE_4_NEED_MUX0_INPUT_1
#define NET_CELL_TYPE_4_NEED_MUX0_INPUT_1 (0)
#else
#define NET_CELL_TYPE_4_NEED_MUX0_INPUT_1_no_value (1)
#endif

#ifndef NET_CELL_TYPE_4_NEED_MUX1_INPUT_1
#define NET_CELL_TYPE_4_NEED_MUX1_INPUT_1 (0)
#else
#define NET_CELL_TYPE_4_NEED_MUX1_INPUT_1_no_value (1)
#endif

#ifndef NET_CELL_TYPE_0_NEED_MUX0_INPUT_BITWISE
#define NET_CELL_TYPE_0_NEED_MUX0_INPUT_BITWISE (0)
#else
#define NET_CELL_TYPE_0_NEED_MUX0_INPUT_BITWISE_no_value (1)
#endif

#ifndef NET_CELL_TYPE_0_NEED_MUX1_INPUT_BITWISE
#define NET_CELL_TYPE_0_NEED_MUX1_INPUT_BITWISE (0)
#else
#define NET_CELL_TYPE_0_NEED_MUX1_INPUT_BITWISE_no_value (1)
#endif

#ifndef NET_CELL_TYPE_1_NEED_MUX0_INPUT_BITWISE
#define NET_CELL_TYPE_1_NEED_MUX0_INPUT_BITWISE (0)
#else
#define NET_CELL_TYPE_1_NEED_MUX0_INPUT_BITWISE_no_value (1)
#endif

#ifndef NET_CELL_TYPE_1_NEED_MUX1_INPUT_BITWISE
#define NET_CELL_TYPE_1_NEED_MUX1_INPUT_BITWISE (0)
#else
#define NET_CELL_TYPE_1_NEED_MUX1_INPUT_BITWISE_no_value (1)
#endif

#ifndef NET_CELL_TYPE_2_NEED_MUX0_INPUT_BITWISE
#define NET_CELL_TYPE_2_NEED_MUX0_INPUT_BITWISE (0)
#else
#define NET_CELL_TYPE_2_NEED_MUX0_INPUT_BITWISE_no_value (1)
#endif

#ifndef NET_CELL_TYPE_2_NEED_MUX1_INPUT_BITWISE
#define NET_CELL_TYPE_2_NEED_MUX1_INPUT_BITWISE (0)
#else
#define NET_CELL_TYPE_2_NEED_MUX1_INPUT_BITWISE_no_value (1)
#endif

#ifndef NET_CELL_TYPE_3_NEED_MUX0_INPUT_BITWISE
#define NET_CELL_TYPE_3_NEED_MUX0_INPUT_BITWISE (0)
#else
#define NET_CELL_TYPE_3_NEED_MUX0_INPUT_BITWISE_no_value (1)
#endif

#ifndef NET_CELL_TYPE_3_NEED_MUX1_INPUT_BITWISE
#define NET_CELL_TYPE_3_NEED_MUX1_INPUT_BITWISE (0)
#else
#define NET_CELL_TYPE_3_NEED_MUX1_INPUT_BITWISE_no_value (1)
#endif

#ifndef NET_CELL_TYPE_4_NEED_MUX0_INPUT_BITWISE
#define NET_CELL_TYPE_4_NEED_MUX0_INPUT_BITWISE (0)
#else
#define NET_CELL_TYPE_4_NEED_MUX0_INPUT_BITWISE_no_value (1)
#endif

#ifndef NET_CELL_TYPE_4_NEED_MUX1_INPUT_BITWISE
#define NET_CELL_TYPE_4_NEED_MUX1_INPUT_BITWISE (0)
#else
#define NET_CELL_TYPE_4_NEED_MUX1_INPUT_BITWISE_no_value (1)
#endif

#ifndef NET_CELL_TYPE_0_NEED_MUX0_INPUT_ADDER
#define NET_CELL_TYPE_0_NEED_MUX0_INPUT_ADDER (0)
#else
#define NET_CELL_TYPE_0_NEED_MUX0_INPUT_ADDER_no_value (1)
#endif

#ifndef NET_CELL_TYPE_0_NEED_MUX1_INPUT_ADDER
#define NET_CELL_TYPE_0_NEED_MUX1_INPUT_ADDER (0)
#else
#define NET_CELL_TYPE_0_NEED_MUX1_INPUT_ADDER_no_value (1)
#endif

#ifndef NET_CELL_TYPE_1_NEED_MUX0_INPUT_ADDER
#define NET_CELL_TYPE_1_NEED_MUX0_INPUT_ADDER (0)
#else
#define NET_CELL_TYPE_1_NEED_MUX0_INPUT_ADDER_no_value (1)
#endif

#ifndef NET_CELL_TYPE_1_NEED_MUX1_INPUT_ADDER
#define NET_CELL_TYPE_1_NEED_MUX1_INPUT_ADDER (0)
#else
#define NET_CELL_TYPE_1_NEED_MUX1_INPUT_ADDER_no_value (1)
#endif

#ifndef NET_CELL_TYPE_2_NEED_MUX0_INPUT_ADDER
#define NET_CELL_TYPE_2_NEED_MUX0_INPUT_ADDER (0)
#else
#define NET_CELL_TYPE_2_NEED_MUX0_INPUT_ADDER_no_value (1)
#endif

#ifndef NET_CELL_TYPE_2_NEED_MUX1_INPUT_ADDER
#define NET_CELL_TYPE_2_NEED_MUX1_INPUT_ADDER (0)
#else
#define NET_CELL_TYPE_2_NEED_MUX1_INPUT_ADDER_no_value (1)
#endif

#ifndef NET_CELL_TYPE_3_NEED_MUX0_INPUT_ADDER
#define NET_CELL_TYPE_3_NEED_MUX0_INPUT_ADDER (0)
#else
#define NET_CELL_TYPE_3_NEED_MUX0_INPUT_ADDER_no_value (1)
#endif

#ifndef NET_CELL_TYPE_3_NEED_MUX1_INPUT_ADDER
#define NET_CELL_TYPE_3_NEED_MUX1_INPUT_ADDER (0)
#else
#define NET_CELL_TYPE_3_NEED_MUX1_INPUT_ADDER_no_value (1)
#endif

#ifndef NET_CELL_TYPE_4_NEED_MUX0_INPUT_ADDER
#define NET_CELL_TYPE_4_NEED_MUX0_INPUT_ADDER (0)
#else
#define NET_CELL_TYPE_4_NEED_MUX0_INPUT_ADDER_no_value (1)
#endif

#ifndef NET_CELL_TYPE_4_NEED_MUX1_INPUT_ADDER
#define NET_CELL_TYPE_4_NEED_MUX1_INPUT_ADDER (0)
#else
#define NET_CELL_TYPE_4_NEED_MUX1_INPUT_ADDER_no_value (1)
#endif


#define NET_CELL_TYPE_0_MUX0_INPUT_0_SEL_VALUE (0)
#define NET_CELL_TYPE_0_MUX0_INPUT_1_SEL_VALUE (NET_CELL_TYPE_0_MUX0_INPUT_0_SEL_VALUE+NET_CELL_TYPE_0_NEED_MUX0_INPUT_1)
#define NET_CELL_TYPE_0_MUX0_INPUT_ADDER_SEL_VALUE (NET_CELL_TYPE_0_MUX0_INPUT_1_SEL_VALUE+NET_CELL_TYPE_0_NEED_MUX0_INPUT_ADDER)
#define NET_CELL_TYPE_0_MUX0_INPUT_BITWISE_SEL_VALUE (NET_CELL_TYPE_0_MUX0_INPUT_ADDER_SEL_VALUE+NET_CELL_TYPE_0_NEED_MUX0_INPUT_BITWISE)
#define NET_CELL_TYPE_0_MUX1_INPUT_0_SEL_VALUE (0)
#define NET_CELL_TYPE_0_MUX1_INPUT_1_SEL_VALUE (NET_CELL_TYPE_0_MUX1_INPUT_0_SEL_VALUE+NET_CELL_TYPE_0_NEED_MUX1_INPUT_1)
#define NET_CELL_TYPE_0_MUX1_INPUT_ADDER_SEL_VALUE (NET_CELL_TYPE_0_MUX1_INPUT_1_SEL_VALUE+NET_CELL_TYPE_0_NEED_MUX1_INPUT_ADDER)
#define NET_CELL_TYPE_0_MUX1_INPUT_BITWISE_SEL_VALUE (NET_CELL_TYPE_0_MUX1_INPUT_ADDER_SEL_VALUE+NET_CELL_TYPE_0_NEED_MUX1_INPUT_BITWISE)
#define NET_CELL_TYPE_1_MUX0_INPUT_0_SEL_VALUE (0)
#define NET_CELL_TYPE_1_MUX0_INPUT_1_SEL_VALUE (NET_CELL_TYPE_1_MUX0_INPUT_0_SEL_VALUE+NET_CELL_TYPE_1_NEED_MUX0_INPUT_1)
#define NET_CELL_TYPE_1_MUX0_INPUT_ADDER_SEL_VALUE (NET_CELL_TYPE_1_MUX0_INPUT_1_SEL_VALUE+NET_CELL_TYPE_1_NEED_MUX0_INPUT_ADDER)
#define NET_CELL_TYPE_1_MUX0_INPUT_BITWISE_SEL_VALUE (NET_CELL_TYPE_1_MUX0_INPUT_ADDER_SEL_VALUE+NET_CELL_TYPE_1_NEED_MUX0_INPUT_BITWISE)
#define NET_CELL_TYPE_1_MUX1_INPUT_0_SEL_VALUE (0)
#define NET_CELL_TYPE_1_MUX1_INPUT_1_SEL_VALUE (NET_CELL_TYPE_1_MUX1_INPUT_0_SEL_VALUE+NET_CELL_TYPE_1_NEED_MUX1_INPUT_1)
#define NET_CELL_TYPE_1_MUX1_INPUT_ADDER_SEL_VALUE (NET_CELL_TYPE_1_MUX1_INPUT_1_SEL_VALUE+NET_CELL_TYPE_1_NEED_MUX1_INPUT_ADDER)
#define NET_CELL_TYPE_1_MUX1_INPUT_BITWISE_SEL_VALUE (NET_CELL_TYPE_1_MUX1_INPUT_ADDER_SEL_VALUE+NET_CELL_TYPE_1_NEED_MUX1_INPUT_BITWISE)
#define NET_CELL_TYPE_2_MUX0_INPUT_0_SEL_VALUE (0)
#define NET_CELL_TYPE_2_MUX0_INPUT_1_SEL_VALUE (NET_CELL_TYPE_2_MUX0_INPUT_0_SEL_VALUE+NET_CELL_TYPE_2_NEED_MUX0_INPUT_1)
#define NET_CELL_TYPE_2_MUX0_INPUT_ADDER_SEL_VALUE (NET_CELL_TYPE_2_MUX0_INPUT_1_SEL_VALUE+NET_CELL_TYPE_2_NEED_MUX0_INPUT_ADDER)
#define NET_CELL_TYPE_2_MUX0_INPUT_BITWISE_SEL_VALUE (NET_CELL_TYPE_2_MUX0_INPUT_ADDER_SEL_VALUE+NET_CELL_TYPE_2_NEED_MUX0_INPUT_BITWISE)
#define NET_CELL_TYPE_2_MUX1_INPUT_0_SEL_VALUE (0)
#define NET_CELL_TYPE_2_MUX1_INPUT_1_SEL_VALUE (NET_CELL_TYPE_2_MUX1_INPUT_0_SEL_VALUE+NET_CELL_TYPE_2_NEED_MUX1_INPUT_1)
#define NET_CELL_TYPE_2_MUX1_INPUT_ADDER_SEL_VALUE (NET_CELL_TYPE_2_MUX1_INPUT_1_SEL_VALUE+NET_CELL_TYPE_2_NEED_MUX1_INPUT_ADDER)
#define NET_CELL_TYPE_2_MUX1_INPUT_BITWISE_SEL_VALUE (NET_CELL_TYPE_2_MUX1_INPUT_ADDER_SEL_VALUE+NET_CELL_TYPE_2_NEED_MUX1_INPUT_BITWISE)
#define NET_CELL_TYPE_3_MUX0_INPUT_0_SEL_VALUE (0)
#define NET_CELL_TYPE_3_MUX0_INPUT_1_SEL_VALUE (NET_CELL_TYPE_3_MUX0_INPUT_0_SEL_VALUE+NET_CELL_TYPE_3_NEED_MUX0_INPUT_1)
#define NET_CELL_TYPE_3_MUX0_INPUT_ADDER_SEL_VALUE (NET_CELL_TYPE_3_MUX0_INPUT_1_SEL_VALUE+NET_CELL_TYPE_3_NEED_MUX0_INPUT_ADDER)
#define NET_CELL_TYPE_3_MUX0_INPUT_BITWISE_SEL_VALUE (NET_CELL_TYPE_3_MUX0_INPUT_ADDER_SEL_VALUE+NET_CELL_TYPE_3_NEED_MUX0_INPUT_BITWISE)
#define NET_CELL_TYPE_3_MUX1_INPUT_0_SEL_VALUE (0)
#define NET_CELL_TYPE_3_MUX1_INPUT_1_SEL_VALUE (NET_CELL_TYPE_3_MUX1_INPUT_0_SEL_VALUE+NET_CELL_TYPE_3_NEED_MUX1_INPUT_1)
#define NET_CELL_TYPE_3_MUX1_INPUT_ADDER_SEL_VALUE (NET_CELL_TYPE_3_MUX1_INPUT_1_SEL_VALUE+NET_CELL_TYPE_3_NEED_MUX1_INPUT_ADDER)
#define NET_CELL_TYPE_3_MUX1_INPUT_BITWISE_SEL_VALUE (NET_CELL_TYPE_3_MUX1_INPUT_ADDER_SEL_VALUE+NET_CELL_TYPE_3_NEED_MUX1_INPUT_BITWISE)
#define NET_CELL_TYPE_4_MUX0_INPUT_0_SEL_VALUE (0)
#define NET_CELL_TYPE_4_MUX0_INPUT_1_SEL_VALUE (NET_CELL_TYPE_4_MUX0_INPUT_0_SEL_VALUE+NET_CELL_TYPE_4_NEED_MUX0_INPUT_1)
#define NET_CELL_TYPE_4_MUX0_INPUT_ADDER_SEL_VALUE (NET_CELL_TYPE_4_MUX0_INPUT_1_SEL_VALUE+NET_CELL_TYPE_4_NEED_MUX0_INPUT_ADDER)
#define NET_CELL_TYPE_4_MUX0_INPUT_BITWISE_SEL_VALUE (NET_CELL_TYPE_4_MUX0_INPUT_ADDER_SEL_VALUE+NET_CELL_TYPE_4_NEED_MUX0_INPUT_BITWISE)
#define NET_CELL_TYPE_4_MUX1_INPUT_0_SEL_VALUE (0)
#define NET_CELL_TYPE_4_MUX1_INPUT_1_SEL_VALUE (NET_CELL_TYPE_4_MUX1_INPUT_0_SEL_VALUE+NET_CELL_TYPE_4_NEED_MUX1_INPUT_1)
#define NET_CELL_TYPE_4_MUX1_INPUT_ADDER_SEL_VALUE (NET_CELL_TYPE_4_MUX1_INPUT_1_SEL_VALUE+NET_CELL_TYPE_4_NEED_MUX1_INPUT_ADDER)
#define NET_CELL_TYPE_4_MUX1_INPUT_BITWISE_SEL_VALUE (NET_CELL_TYPE_4_MUX1_INPUT_ADDER_SEL_VALUE+NET_CELL_TYPE_4_NEED_MUX1_INPUT_BITWISE)


// each cell type - nr inputs
#define NET_CELL_TYPE_0_NR_MUX0_INPUTS (NET_CELL_TYPE_0_NEED_MUX0_INPUT_0+NET_CELL_TYPE_0_NEED_MUX0_INPUT_1+\
										NET_CELL_TYPE_0_NEED_MUX0_INPUT_ADDER+NET_CELL_TYPE_0_NEED_MUX0_INPUT_BITWISE)

#define NET_CELL_TYPE_0_NR_MUX1_INPUTS (NET_CELL_TYPE_0_NEED_MUX1_INPUT_0+NET_CELL_TYPE_0_NEED_MUX1_INPUT_1+\
										NET_CELL_TYPE_0_NEED_MUX1_INPUT_ADDER+NET_CELL_TYPE_0_NEED_MUX1_INPUT_BITWISE)

#define NET_CELL_TYPE_1_NR_MUX0_INPUTS (NET_CELL_TYPE_1_NEED_MUX0_INPUT_0+NET_CELL_TYPE_1_NEED_MUX0_INPUT_1+\
										NET_CELL_TYPE_1_NEED_MUX0_INPUT_ADDER+NET_CELL_TYPE_1_NEED_MUX0_INPUT_BITWISE)

#define NET_CELL_TYPE_1_NR_MUX1_INPUTS (NET_CELL_TYPE_1_NEED_MUX1_INPUT_0+NET_CELL_TYPE_1_NEED_MUX1_INPUT_1+\
										NET_CELL_TYPE_1_NEED_MUX1_INPUT_ADDER+NET_CELL_TYPE_1_NEED_MUX1_INPUT_BITWISE)

#define NET_CELL_TYPE_2_NR_MUX0_INPUTS (NET_CELL_TYPE_2_NEED_MUX0_INPUT_0+NET_CELL_TYPE_2_NEED_MUX0_INPUT_1+\
										NET_CELL_TYPE_2_NEED_MUX0_INPUT_ADDER+NET_CELL_TYPE_2_NEED_MUX0_INPUT_BITWISE)

#define NET_CELL_TYPE_2_NR_MUX1_INPUTS (NET_CELL_TYPE_2_NEED_MUX1_INPUT_0+NET_CELL_TYPE_2_NEED_MUX1_INPUT_1+\
										NET_CELL_TYPE_2_NEED_MUX1_INPUT_ADDER+NET_CELL_TYPE_2_NEED_MUX1_INPUT_BITWISE)

#define NET_CELL_TYPE_3_NR_MUX0_INPUTS (NET_CELL_TYPE_3_NEED_MUX0_INPUT_0+NET_CELL_TYPE_3_NEED_MUX0_INPUT_1+\
										NET_CELL_TYPE_3_NEED_MUX0_INPUT_ADDER+NET_CELL_TYPE_3_NEED_MUX0_INPUT_BITWISE)

#define NET_CELL_TYPE_3_NR_MUX1_INPUTS (NET_CELL_TYPE_3_NEED_MUX1_INPUT_0+NET_CELL_TYPE_3_NEED_MUX1_INPUT_1+\
										NET_CELL_TYPE_3_NEED_MUX1_INPUT_ADDER+NET_CELL_TYPE_3_NEED_MUX1_INPUT_BITWISE)

#define NET_CELL_TYPE_4_NR_MUX0_INPUTS (NET_CELL_TYPE_4_NEED_MUX0_INPUT_0+NET_CELL_TYPE_4_NEED_MUX0_INPUT_1+\
										NET_CELL_TYPE_4_NEED_MUX0_INPUT_ADDER+NET_CELL_TYPE_4_NEED_MUX0_INPUT_BITWISE)

#define NET_CELL_TYPE_4_NR_MUX1_INPUTS (NET_CELL_TYPE_4_NEED_MUX1_INPUT_0+NET_CELL_TYPE_4_NEED_MUX1_INPUT_1+\
										NET_CELL_TYPE_4_NEED_MUX1_INPUT_ADDER+NET_CELL_TYPE_4_NEED_MUX1_INPUT_BITWISE)

#endif
// ^ for define file

#endif //XPU_SIMULATOR_DEFINES_HPP
