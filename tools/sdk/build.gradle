buildscript {   
    dependencies { 
        classpath 'pl.allegro.tech.build:axion-release-plugin:1.15.3'
    }
}

plugins {
    id 'java'
    id 'pl.allegro.tech.build.axion-release' version '1.15.3'
    id 'maven-publish'
    id 'se.patrikerdes.use-latest-versions' version '0.2.18'
    id 'com.github.ben-manes.versions' version '0.47.0'
    id 'org.beryx.runtime' version '1.12.7'
}

group = 'xpu'


def USER_HOME = "$System.env.HOME"
def PROJECT_HOME = rootProject.file('../../')

repositories {
    mavenLocal()
    gradlePluginPortal()    
    maven {
        url = 'https://maven.pkg.github.com/arhacc/*'
        credentials {
            //username = github_maven_user
            username = System.getenv('GITHUB_USER')
            //password = github_maven_password
            password = System.getenv('GITHUB_TOKEN')
        }
    }        
    maven {
        url = uri('https://repo.maven.apache.org/maven2')
    }
    maven {
        url = uri('https://repo1.maven.org/maven2/')
    }
}


dependencies {
    implementation 'xpu:xpu-sdk-libs:0.14.76'
}

sourceCompatibility = '17'
targetCompatibility = '17'

// groupId:     com.formdev
// artifactId:  flatlaf
// version:     2.4

/*// OLD CONF
scmVersion {
    repository {
        // doc: Repository
        type = 'git' // type of repository
        directory = PROJECT_HOME // repository location
        remote = 'main' // remote name
    }

    tag { // doc: Version / Parsing
        prefix = 'v'
        versionSeparator = ''
    }

// doc: Dry run
    localOnly = true // never connect to remote

    // doc: Uncommitted changes
    ignoreUncommittedChanges = false // should uncommitted changes force version bump

    // doc: Pre-release checks
    checks {
        uncommittedChanges = false // permanently disable uncommitted changes check
        aheadOfRemote = false // permanently disable ahead of remote check
    }
}
*/

scmVersion {
    // doc: Dry run
    localOnly.set( true )// never connect to remote
    
    // doc: Version / Tag with highest version
    useHighestVersion.set(true) 
    
    // doc: Uncommitted changes
    ignoreUncommittedChanges.set(true) // should uncommitted changes force version bump
        
    // doc: Version / Sanitization
    sanitizeVersion.set(true) // should created version be sanitized, true by default
    
    tag { // doc: Version / Parsing
        prefix.set('v')
        versionSeparator.set('')  // separator between prefix and version number, '' by default, empty String means no separator
       
    }
     
    repository {
        // doc: Repository
        type = 'git' // type of repository
        directory = PROJECT_HOME // repository location
        remote = 'main' // remote name
    }
   
    // doc: Pre-release checks
    checks {
        uncommittedChanges.set(false) // permanently disable uncommitted changes check
        aheadOfRemote.set(false) // permanently disable ahead of remote check
    }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}


allprojects {
    project.version = scmVersion.version.replaceAll("-SNAPSHOT","")

  gradle.projectsEvaluated {
    tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xmaxerrs" << "100" << "-Xlint:deprecation" << "-Xlint:unchecked"
//        options.compilerArgs << "-Xmaxerrs" << "2000" << "-Xlint:deprecation" << "-Xlint:unchecked"
//        options.compilerArgs << "-Xmaxerrs" << "1000"
        options.compilerArgs << "-Xmaxerrs" << "-Xdiags:verbose"
    }
  }  
}


configurations {
    deployerJars
}

dependencies {
    deployerJars "io.packagecloud.maven.wagon:maven-packagecloud-wagon:0.0.6"
}


publishing {
    repositories {
        mavenLocal()
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/arhacc/sw")
            credentials {
                username = System.getenv('GITHUB_USER')
                password = System.getenv('GITHUB_TOKEN')
            }
        }
    }

    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
}

jar {
    manifest.attributes('Multi-Release': 'true')

    exclude('META-INF/*.SF')
    exclude('META-INF/*.RSA')
    exclude('META-INF/*.DSA')
    
//    dependsOn(release { classifier = null })
}

run {
    mainClass = 'xpu.sw.tools.sdk.Sdk'
}

runtime {
    options = ['--compress', '2', '--no-header-files', '--no-man-pages']

    launcher {
        noConsole = true
    }

    jpackage {
//        distDir.set(File("/Users/marius/.sense/"))
        skipInstaller = true
//        imageName = "demo"

        // Uncomment and adjust the following line if your runtime task is configured to generate images for multiple platforms
        // targetPlatformName = "mac"

        def currentOs = org.gradle.internal.os.OperatingSystem.current()
        def imgType = currentOs.windows ? 'ico' : currentOs.macOsX ? 'icns' : 'png'
//        imageOptions += ['--icon', "src/main/resources/hellofx.$imgType"]
//        installerOptions += ['--resource-dir', "src/main/resources"]
        installerOptions += ['--vendor', 'Acme Corporation']

        if(currentOs.windows) {
            installerOptions += ['--win-per-user-install', '--win-dir-chooser', '--win-menu', '--win-shortcut']
        }
        else if (currentOs.linux) {
            installerOptions += ['--linux-package-name', 'hellofx','--linux-shortcut']
        }
        else if (currentOs.macOsX) {
            installerOptions += ['--mac-package-name', 'hellofx']
        }
    }
}

tasks.runtime.doLast {
    def archiveName = jar.archiveFile.asFile.get().name
    delete fileTree(dir:"$USER_HOME/.xpu/lib/", include: 'xpu-sdk-*.jar', exclude: 'xpu-sdk-libs-*.jar') 
    copy{
        from "$buildDir/install/xpu-sdk/lib/$archiveName"
        into "$USER_HOME/.xpu/lib/"
    }
}

useLatestVersions {
   updateWhitelist = []
   updateBlacklist = ['org.beryx.runtime']
   versionFiles = []
   rootVersionFiles = ['gradle.properties']
}

//runtime.dependsOn jar

tasks.publishToMavenLocal.dependsOn('jar')
tasks.build.dependsOn('publishToMavenLocal')
tasks.publish.dependsOn('jar')

tasks.verifyRelease.dependsOn('compileJava')
tasks.verifyRelease.dependsOn('processResources')
tasks.verifyRelease.dependsOn('generatePomFileForMavenJavaPublication')
tasks.release.dependsOn('compileJava')
tasks.release.dependsOn('processResources')
tasks.release.dependsOn('generatePomFileForMavenJavaPublication')

//publish.dependsOn javadoc


project.gradle.startParameter.excludedTaskNames.add('compileTestJava')
project.gradle.startParameter.excludedTaskNames.add('processTestResources')
project.gradle.startParameter.excludedTaskNames.add('testClasses')
project.gradle.startParameter.excludedTaskNames.add('test')
project.gradle.startParameter.excludedTaskNames.add('check')


