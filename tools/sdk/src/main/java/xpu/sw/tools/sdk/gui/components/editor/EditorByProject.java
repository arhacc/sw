//-------------------------------------------------------------------------------------
package xpu.sw.tools.sdk.gui.components.editor;

//-------------------------------------------------------------------------------------
import java.io.*;
import java.nio.*;
import java.nio.file.*;
import java.net.*;
import java.util.*;
import javax.swing.*;

import org.apache.commons.configuration2.*;
import org.apache.logging.log4j.*;

import xpu.sw.tools.sdk.common.context.*;
import xpu.sw.tools.sdk.common.project.*;

import xpu.sw.tools.sdk.gui.*;
import xpu.sw.tools.sdk.gui.components.common.*;
import xpu.sw.tools.sdk.gui.components.common.panels.*;
import xpu.sw.tools.sdk.gui.components.common.buttons.*;

//-------------------------------------------------------------------------------------

/**
 *
 * @author marius
 */
public class EditorByProject extends GuiPanel implements CloseTabListener {
    private Project project;
    private EditorByLevel editor;


    private Configuration sdkConfig;
    private Configuration projectConfig;
    private List<EditorTab> editorTabs;

    /**
     * Creates new form Editor
     */
    public EditorByProject(Gui _gui, Context _context, Project _project, EditorByLevel _editor) {
        super(_context, _gui);
        project = _project;
        editor = _editor;
        projectConfig = _project.getConfiguration();
        initComponents();
        sdkConfig = context.getSdkConfig();
        editorTabs = new ArrayList<EditorTab>();
        
        setVisible(true);
        init();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();

        setLayout(new java.awt.BorderLayout());

        jTabbedPane1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        add(jTabbedPane1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTabbedPane jTabbedPane1;
    // End of variables declaration//GEN-END:variables

//-------------------------------------------------------------------------------------
    private void init(){        
        List<String> _openFiles = projectConfig.getList(String.class, "open_files");
//        openFiles=_openFiles;
        
        if(_openFiles != null){
            _openFiles.forEach(_openFile -> {
                addTab(_openFile);
            });
        }
    }

//-------------------------------------------------------------------------------------
    public int addTab(String _filePath){    
        return addTab(new File(_filePath));
//        jTabbedPane1.setSelectedIndex(jTabbedPane1.getTabCount() - 1);
    }

//-------------------------------------------------------------------------------------
    public int addTab(File _file){
        return addTabIfDoesntExists(_file);
    }

//-------------------------------------------------------------------------------------
    private int addTabIfDoesntExists(File _file){
        if(_file.getName().endsWith(".prj")){
            if (gui.getMyComponents() != null)
                gui.getMyComponents().getHierarchy().addProject(new Project(context, _file.getName()));
            return -1;
        }
        String _filePath = _file.getPath();
        int _tabIndex = getEditorTab(_filePath);
        if(_tabIndex == -1){
            _tabIndex = addNewTab(_file);
        }
        if(_tabIndex != -1){
            selectEditorTab(_tabIndex);
        }
        return _tabIndex;
    }

//-------------------------------------------------------------------------------------
    private int addNewTab(File _file){
        EditorTab _editorTab = new EditorTab(gui, context, _file, editor.getThemeName());
        editorTabs.add(_editorTab);

        jTabbedPane1.addTab(_file.getName(), _editorTab);


//        super.addTab(title, icon, component, tip);
        int _count = jTabbedPane1.getTabCount() - 1;
        jTabbedPane1.setTabComponentAt(_count, new ButtonTabComponent(jTabbedPane1, this));

        List<String> _openFiles = projectConfig.getList(String.class, "open_files");
        String _openFile = _file.getAbsolutePath();
        if((_openFiles == null ) || (!_openFiles.contains(_openFile))){
            projectConfig.addProperty("open_files", _openFile);
        }
        return _count;
    }

//-------------------------------------------------------------------------------------
    public void removeTab(int _index){
        jTabbedPane1.removeTabAt(_index);
        closeTab(_index);                 
        
    }

//-------------------------------------------------------------------------------------
    public void closeTab(int _index){
        
        List<String> _openFiles = projectConfig.getList(String.class, "open_files");
        String _tabFilePath = editorTabs.get(_index).getPath().toString();
        projectConfig.clearProperty("open_files");
        log.debug("_tabFilePath="+_tabFilePath);
        for (int i = 0; i < _openFiles.size(); i++) {
            String _path = _openFiles.get(i);
            log.debug("_path="+_path);

            if(!_path.equals(_tabFilePath)){
                projectConfig.addProperty("open_files", _path);
            }
        }
        editorTabs.remove(_index);
    }

//-------------------------------------------------------------------------------------
    public void removeAllTabs(){
        editorTabs.clear();
        jTabbedPane1.removeAll();
        projectConfig.clearProperty("open_files");
    }

//-------------------------------------------------------------------------------------
    protected int getEditorTab(String _filePath){
        log.debug("getEditorTab.1: "+ _filePath);
        Path _p = Paths.get(_filePath); 
        for(int i = 0; i < editorTabs.size(); i++){
            EditorTab _editorTab = editorTabs.get(i);
            try{
//                log.debug("getEditorTab.2: "+ _p+", " + _editorTab.getPath());
                if(Files.isSameFile(_p, _editorTab.getPath())){
                    return i;
                }                
            }catch(IOException _e){

            }
        }
        return -1;
    }

//-------------------------------------------------------------------------------------
    protected void selectEditorTab(int _index){
        jTabbedPane1.setSelectedIndex(_index);
    }


//-------------------------------------------------------------------------------------
    public String getSelectedFilename(){
        int _index = jTabbedPane1.getSelectedIndex();
        if(_index == -1){
            return null;
        }
        return editorTabs.get(_index).getPath().toString();
    }


//-------------------------------------------------------------------------------------
    public void setTheme(String _themeName){
        editorTabs.forEach(_editorTab -> {
            _editorTab.setTheme(_themeName);
        });
    }

//-------------------------------------------------------------------------------------
    public void saveCurentTab(){
        int _index = jTabbedPane1.getSelectedIndex();
//        log.debug("Saving tab index = " + _index);
        editorTabs.get(_index).save();
    }

//-------------------------------------------------------------------------------------
  
}
//-------------------------------------------------------------------------------------
