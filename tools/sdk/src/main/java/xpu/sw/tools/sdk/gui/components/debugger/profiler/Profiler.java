//-------------------------------------------------------------------------------------
package xpu.sw.tools.sdk.gui.components.debugger.profiler;
//-------------------------------------------------------------------------------------
import java.awt.*;
import java.io.*;
import java.net.*;
import java.util.*;
import javax.swing.*;
import javax.swing.table.*;
import javax.swing.border.*;

import org.apache.commons.configuration2.*;
import org.apache.logging.log4j.*;
import org.apache.logging.log4j.core.*;
import org.apache.logging.log4j.core.appender.*;
import org.apache.logging.log4j.core.config.*;
import org.apache.logging.log4j.core.layout.*;
import org.apache.logging.log4j.core.appender.rolling.*;

import xpu.sw.tools.sdk.common.context.*;
import xpu.sw.tools.sdk.common.context.arch.*;
import xpu.sw.tools.sdk.common.project.*;

import xpu.sw.tools.sdk.gui.*;
import xpu.sw.tools.sdk.gui.components.common.buttons.*;

//-------------------------------------------------------------------------------------
public class Profiler extends javax.swing.JPanel {
    private Gui gui;
    private Context context;
    private ArchitectureImplementation architectureImplementation;
    private Project project;
    private org.apache.logging.log4j.Logger log;

    private org.apache.commons.configuration2.Configuration sdkConfig;

    private int startIndex;
    private int stopIndex;
    private int minIndex;
    private int maxIndex;

//-------------------------------------------------------------------------------------
    public Profiler(Gui _gui, Context _context, Project _project) {
        gui = _gui;
        context = _context;
        project = _project;
        architectureImplementation = context.getArchitectureImplementations().getArchitecture(_project.getArchitectureId());
        log = _context.getLog();
        initComponents();
        sdkConfig = context.getSdkConfig();
//        xpuConfig = context.getXpuConfig();
        init();
    }



    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setAutoscrolls(true);
        setOpaque(false);
        setLayout(new java.awt.BorderLayout());
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

//-------------------------------------------------------------------------------------
    private void init(){
        if(architectureImplementation == null){
            log.error("Cannot initialize Debugger: architectureId is not defined in " + project);
            return;
        }
        int _nCells = architectureImplementation.getNCells();        
//        int _memDataArraySizeLog = 
        int _memDataArraySize = architectureImplementation.getMemDataArraySize();

        setVisible(true);
    }

//-------------------------------------------------------------------------------------
    public void refresh(){
        log.debug("Profiler refresh... init");
/*        remoteHandler.debugRetreiveArrayRegistry(registryDataTableModel.getData(), startIndex, stopIndex);
        registryDataTableModel.fireTableDataChanged();
        remoteHandler.debugRetreiveArrayMemoryData(memoryDataTableModel.getData(), startIndex, stopIndex, 0, 1023);
        memoryDataTableModel.fireTableDataChanged();*/
        log.debug("Profiler refresh... stop");
    }
/*
//-------------------------------------------------------------------------------------
    public void updateMemoryData(int[][] _memoryData){
        memoryDataTableModel.update(_memoryData);
        refreshTables();
    }

//-------------------------------------------------------------------------------------
    public void updateRegistryData(int[][] _registryData){
        registryDataTableModel.update(_registryData);
        refreshTables();
    }

    
//-------------------------------------------------------------------------------------
    public boolean isOptimizedDrawingEnabled(){
        return false;
    }
*/
//-------------------------------------------------------------------------------------
}
//-------------------------------------------------------------------------------------
